---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
---

# Module 2

## Learning objectives

-   *Understand the general structure of functions*
-   *Get familiar with writing simple functions to inspect data and tabulate columns*

# Explaining functions

## The anatomy of a function

*Functions have arguments*, which give more specific instructions on how the function works.

![](/images/functionanatomy2.png)

## Function arguments

-   Function arguments *can be optional* and *have names*

-   E.g. the round() function takes two arguments:

    -   `x`: the input; a number to be rounded
    -   `digits`: the number of decimals to round it to

:::::::::: columns
::: {.column width="5%"}
:::

:::: {.column width="55%"}
<br>

::: code-box-small
`round(x = 33.556, digits = 1)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br><br> `r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
`33.6`
:::
::::
::::::::::

## Function arguments

-   Remember `sqrt`? This is a simple function with only one argument: the input

-   You don't always need to show the argument name. This is why `round(16)` worked fine in the previous lesson.

:::::::::: columns
::: {.column width="5%"}
:::

:::: {.column width="55%"}
<br>

::: code-box-small
`round(x = 81)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br><br> `r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
`9`
:::
::::
::::::::::

## How are functions organised?

-   Functions are grouped into *packages*.
-   Functions in a package particularly have the same theme
-   The ready-to-use functions that come with R are available in a {base} package
-   You can also install many other packages (more on that later), for example:

![](/images/hex.png)

## Helpful functions for dataframes

*{base} R package:*

-   *ncol()*: To count the number of columns
-   *nrow()*: To count the number of rows

*{dplyr} package:*

-   *select()*: To restrict a dataframe to specific columns
-   *count()*: To count the number of rows within one or more groups
-   *arrange()*: To order the rows by the value of specific columns

*{janitor} package*: -

-   *tabyl()*: To produce frequency tables

# select() from {dplyr}

## select()

::: slide-header
{dplyr}
:::

-   *Purpose:* To select the columns we want from the data
-   *Why:* Because it is easier to deal with fewer columns and it uses less space on your computer
-   *Example:* You want to create a linelist for analysis and remove columns that are not needed
-   *How:*

::: code-box
`select(data, col1, col2, col3,...)`
:::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
Code
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
Code
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
input_data <- head(mtcars) |> 
  dplyr::select(cyl, mpg, disp)

tab_input <- input_data |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 


tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`select(mtcars)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`select(mtcars)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- tab_input 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`select(mtcars, cyl)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::select(cyl) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`select(mtcars, mpg)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::select(mpg) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`select(mtcars, mpg, cyl)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::select(mpg, cyl) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`select(mtcars, mpg, cyl, disp)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::select(mpg, cyl, disp) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
select(mtcars, -mpg)
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::select(-mpg) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

# arrange() from {dplyr}

## arrange()

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

-   *Purpose:* To sort (arrange) rows in a certain order based on column content
-   *Why:* Because it's easier to understand a sorted table, and so you can extract some information.
-   *Example:* You order a linelist by onset date to find the 10 earliest cases
-   *How:*

::: code-box
`arrange(data, col1, col2, col3,...)`
:::


## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`arrange(mtcars, cyl)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::arrange(cyl) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`arrange(mtcars, cyl, mpg)`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::arrange(cyl, mpg) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`arrange(mtcars, desc(cyl))`
:::

  <!-- This adds a linespace -->

::::::::: columns
:::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
::::

:::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::arrange(desc(cyl)) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
::::
:::::::::

# count() from {dplyr}

## count()

::: slide-header
{dplyr}
:::

-   *Purpose:* To count the number of rows based on values in a column
-   *Why:* To quickly describe or checking data
-   *Example:* You need to check if there are duplicate identifiers, or to count the number of cases (rows) per hospital
-   *How:*

::: code-box
`count(data, col1, col2, col3,...)`
:::


## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`count(mtcars, cyl)`
:::

  <!-- This adds a linespace -->

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::count(cyl) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## 

::: slide-header
{dplyr}
:::

  <!-- This adds a linespace -->

::: code-box
`count(mtcars, cyl, mpg)`
:::

  <!-- This adds a linespace -->

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::count(cyl, mpg) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

# tabyl() from {janitor}

## tabyl()

::: slide-header
{janitor}
:::

-   *Purpose:* To easily create frequency tables
-   *Why:* To look at distributions of categorical values in data
-   *Example:* You want to quickly find out the proportion of cases in a linelist who were hospitalised 
-   *How:* At its simplest:

::: code-box
`tabyl(data, col1, col2, col3)`
:::


## 

::: slide-header
{janitor}
:::

  <!-- This adds a linespace -->

::: code-box
`tabyl(mtcars, cyl)`
:::

  <!-- This adds a linespace -->

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> janitor::tabyl(cyl) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## 

::: slide-header
{janitor}
:::

  <!-- This adds a linespace -->

::: code-box
`tabyl(mtcars, cyl, mpg)`
:::

  <!-- This adds a linespace -->

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> janitor::tabyl(cyl, mpg) |> 
  gt::gt() |>  gtExtras::gt_theme_espn() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

# Exercise

## Scenario {.exercise-slide}

It’s now been a week since the last sitrep was generated by your colleague, and you have new clean data.

Your boss wants to know the following nationally:

-   The latest case numbers
-   Demographics
-   Case outcomes
-   Trends over time based on symptom onset date
-   Symptoms

Go ahead and investigate the clean data with some simple functions!

## Access the exercises {.exercise-slide}

Use our interactive tool to select columns and see the code that you would write.

1.  Go to shiny app link
2.  Choose the select tab and pick columns that you want
