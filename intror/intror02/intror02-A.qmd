---
title: "Module 2A"
subtitle: "Describing data with {base} and {dplyr}"
author: "[Applied Epi: Intro to R Course]"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
    title-slide-attributes:
      data-background-color: "#012d78"
      style: "font-size: 40px;"
      data-subtitle-style: "font-size: 80px;"  # Subtitle size
      data-author-style: "font-size: 10px;"  # Author size
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

```{r}
## Data
pacman::p_load(rio, dplyr, gt)
df <- import(here::here("intror/gi_2021-05-25_linelist_clean_demo.rds"))

input_data <- df |> 
  dplyr::select(id, age, sex, date_report)

tab_input <- input_data |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```

## Module 2 learning objectives

In *Part A* you will:

- Get introduced to logical evaluation and its role in data manipulation
- Take a closer look at data classes
- Get introduced to key {dplyr} functions for manipulating datasets: `filter()`, and `mutate()`

In *Part B* you will:

- Explore {dplyr} functions for summarizing data: `group_by`, `summarize()`, and `arrange()`
- Start chaining functions together with pipes

## Recap

Blabla

# Logical evaluation and classes

## What is logical evaluation?

::: incremental

- Logical evaluation checks whether a condition is `TRUE` or `FALSE`.

- It involves comparison operators:

:::

::: {#general-box style="text-align: left; width: 550px; background: #ebebeb; margin: 0 auto; font-size: 29px;" .fragment}
| Operator | Description                         |
|----------|-------------------------------------|
| `==`     | Equals                              |
| `!=`     | Not equal                           |
| `>`      | Greater than                        |
| `>=`     | Greater than or equal to            |
| `<`      | Less than                           |
| `<=`     | Less than or equal to               |
:::

::: fragment

- Logical evaluations are often used to filter data or make decisions in code.
:::

## For example

::::::::::: fragment
This code assesses if 1 is less than 4:

:::::::::: columns

::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`1 < 4`
:::
::::

:::: {.column width="5%"}

::: arrow-box

&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`TRUE`
:::
::::
::::::::::
:::::::::::
<br>

::::::::::: fragment
This code assesses if the object assigned as 3 + 5 is equal to 8:

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`x <- 3 + 5` <br>
`x == 8`
:::
::::

:::: {.column width="5%"}

::: arrow-box
<br>
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`TRUE` <br>
<br>
:::
::::
::::::::::
:::::::::::

## Evaluating multiple conditions

You can evaluate a combination of conditional statements with:

- `&` for "and" 
- `|` for "or"

::::::::::::: fragment

For example let's assign object `x`

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`x <- 1` <br>
:::
::::

:::: {.column width="40%"}
::::
::::::::::

:::::::::::::

::::::::::::: fragment
Then evaluate these conditional statements:

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`x < 10 & x > 5`
:::
::::

:::: {.column width="5%"}

::: arrow-box
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`FALSE` <br>
:::
::::
::::::::::

:::::::::::::
<br>

::::::::::::: fragment

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`x < 10 | x > 5`
:::
::::

:::: {.column width="5%"}

::: arrow-box
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`TRUE` <br>
:::
::::
::::::::::

::::::::::::: 

## Maths with logical values

- R actually treats `TRUE` and `FALSE` as numerical values:
   - `TRUE` is equivalent to 1
   - `FALSE` is equivalent to 0
   
- This means you can do maths with them!

<br>

:::::::::: {.columns .fragment}
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`(1<2) + (2<5)`
:::
::::

:::: {.column width="5%"}

::: arrow-box
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`2` <br>
:::
::::
::::::::::

## Quiz!

<br>
<br>
What is the output of this code?

::: {.general-box style="text-align: center; width: 800px; background: #e4d5f0; margin: 0 auto; font-size: 29px;"}
`threshold <- 5`
<br><br>
`sum(1<threshold, 2<threshold, 8<threshold)`
<br>
:::

## Quiz!

<br>
<br>
What is the output of this code?

::: {.general-box style="text-align: center; width: 800px; background: #e4d5f0; margin: 0 auto; font-size: 29px;"}
`threshold <- 5`
<br><br>
`sum(1<threshold, 2<threshold, 8<threshold)`
<br>
:::

<br>
**Answer: 2!**

`TRUE` + `TRUE` + `FALSE` <br>
= `1` + `1` + `0` <br>
= 2

## Recap!

This code *tries* to assess if a is less than b:

:::::::::: columns

::: {.column width="10%"}
:::

:::: {.column width="40%"}

::: code-box-small
`a <- 1` <br>
`b <- "2"` <br>
`a < b`
:::
::::

:::: {.column width="5%"}

::: arrow-box

&#8594;
:::
::::

:::: {.column width="45%"}

::: output-box
<br>
`FALSE` <br><br>
:::

::: {.general-box .fragment style="text-align: right; color: #7e48a8;"}
<br> ‚ùî**QUIZ**:  Why doesn't this work ?
:::

::: {.fragment style="text-align: right; color: #7e48a8;"}
<br> üí°**ANSWER**: **a is a number** and **b is a character**! Different **classes** cannot be directly compared.
:::


::::
::::::::::



## Checking class

Sometimes you will need to check the object or column class to write correct code. 

Do this with the function `class()` from {base}

:::::::::: {.columns .fragment}

::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`a <- 4` <br>
`class(a)`
:::
::::

:::: {.column width="5%"}

::: arrow-box

&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`numeric`
:::
::::
::::::::::

::::::::::: {.fragment}

In our df dataset, we can check the class of the sex column this way:

:::::::::: columns

::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`class(df$sex)`
:::
::::

:::: {.column width="5%"}

::: arrow-box

&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`character`
:::
::::
::::::::::

The \$ sign is quick syntax to specify a column in a dataframe (data$column), that we will sometimes use. 

:::::::::::

## Other classes R

Here is a table with some additional classes you will encounter during this course:

::: {#general-box style="text-align: left; width: 850px; background: #ebebeb; margin: 0 auto; font-size: 29px;"}

| Class      | Description                                  |
|------------|----------------------------------------------|
| Numeric    | Numbers, which can include decimal points (e.g. 1.3) |
| Character  | Text or string values (e.g., "hello" but also "200")        |
| Logical    | Boolean values (`TRUE`, `FALSE`)             |
| Factor     | Categorical data (e.g., "low", "medium", "high") |
| Date       | Dates (e.g. "2025-01-01")                    |
:::

## Quiz!

Will this equal `TRUE` or `FALSE`? 

::: {.general-box style="text-align: center; width: 750px; background: #e4d5f0; margin: 0 auto; font-size: 29px;"}
`date1 <- "5th December 2025"` <br>
`date2 <- "4th December 2025"` <br> <br>

`date1 - date2 == 1`
:::

<br>

::: {.fragment}
**Answer**: Trick question! This code will result in an error: `non-numeric argument to binary operator`. This is because:

- `date1` and `date2` are actually character values
- R doesn't know how to minus one character value from another!

(Note: We will learn how to transform the class of an object later!)
:::

# Missing values

## Missing values in R

- R represents missing values with `NA`, which stands for **not available**
- This is **not** a character value "NA"
- For example:

:::: {.column width="50%" .fragment}
```{r}
input_data |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```
::::

:::: {.column width="50%"}
::: {.obs-box .fragment style="display: flex;"}
<br> üí° R also has subtypes of missing values (e.g. `NA_character_` for character values) - but don't worry about this for now
:::
::::

## Missing values in R

- If you see what looks like a blank in your data - this is NOT a missing value!
- This is actually an empty string (character value)
- For example:


:::: {.column width="50%" .fragment}
```{r}
input_data |> 
  mutate(sex = if_else(is.na(sex), "", sex)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```
::::

:::: {.column width="50%"}
::: {.obs-box .fragment style="display: flex;"}
<br> üí° You can type out an empty string with two quotation marks, like this ""
:::
::::



## Evaluating missingness 

- To assess missingness, you can use:
   - `is.na()` function to check if missing
   - `!is.na()` to evaluate if **not** missing
- For example:

::::::::::::: fragment
:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`is.na("Hello")`
:::
::::

:::: {.column width="5%"}

::: arrow-box
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`FALSE` <br>
:::
::::
::::::::::

:::::::::::::
<br>

::::::::::::: fragment
:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`is.na(c(8, 3, NA))`
:::
::::

:::: {.column width="5%"}

::: arrow-box
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`FALSE FALSE TRUE` <br>
:::
::::
::::::::::

:::::::::::::
<br>

::::::::::::: fragment

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}

::: code-box-small
`!is.na(c(8, 3, NA))`
:::
::::

:::: {.column width="5%"}

::: arrow-box
&#8594;
:::
::::

:::: {.column width="35%"}

::: output-box
`TRUE TRUE FALSE` <br>
:::
::::
::::::::::

::::::::::::: 






# filter() data with {dplyr}

## filter()

::: slide-header
{dplyr}
:::

::: incremental
-   *Purpose:* To filter data to specific rows of interest
-   *Why:* So you retain only the relevant observations for a particular data processing or analysis step
-   *Example:* You want to create a regional linelist, as a subset of a national linelist
-  *How:* Provide the data frame and a logical condition:
:::

::: {.code-box .fragment}
`filter(data, col == X)`
:::

::: {.fragment style="text-align: right;"}
<br> üí° Rows that evaluate to `TRUE` are kept!
:::



## 

::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, sex == "Male")`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(sex=="Male") |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::


## 

::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, age < 18)`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(age < 18) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## 


::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, sex == "Male" & age <18)`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(sex == "Male" & age <18) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## 


::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, !is.na(sex))`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(!is.na(sex)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

# mutate() new columns with {dplyr}

## mutate()

::: slide-header
{dplyr}
:::

* *Purpose*: Add new columns or modify existing ones in your data frame
* *Why:* Create columns with new values or transformations of existing columns
* *Example*: Create a new column to tag cases reported in the last 7 days
* *How*: Write an argument to define the new column:

::: {.code-box style="width: 800px;"}
`mutate(data, new_column = expression)`
:::

## mutate()

::: slide-header
{dplyr}
:::

The expression for the new column can be:

:::incremental 

- A *single value* for a column with a constant value: <br>
<span class="inline-code">   `mutate(data, year = 2025)`</span> <br>
<br>
- A *mathematical expression* for a column with calculated values: <br>
<span class="inline-code">`mutate(data, age_in_months = age * 12)`</span> <br>
<br>
- A *logical expression* for a column with `TRUE` or `FALSE`: <br>
<span class="inline-code">`mutate(data, is_young_female = sex == "Male" & age < 18)`</span> <br>
<br>
- A *function* for more complex transformations: <br>
<span class="inline-code">`mutate(data, rounded_height = round(height, 1))`</span>

:::

## 

::: slide-header
{dplyr}
:::

<br>

::: code-box
`mutate(df, year = 2021)`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::mutate(year=2021) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## 

::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, age_u5 = age < 5)`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::mutate(age_u5 = age<5) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::


# Exercise

## Scenario {.exercise-slide}

::: incremental

- Your boss presented your previous findings at a national meeting but returned stressed!

- He reported an ongoing decline in cases as the peak in onset dates had passed, but faced questions about reporting delays, especially in the region with the most cases. He was also reminded that the national surveillance standard is for cases to be reported in less than 5 days. 

- It is your turn to investigate!

:::

## Access the exercises {.exercise-slide}

Instructions here

# Recap

## Recap

::: slide-header
{dplyr}
:::

You learned how to use `desc()` to sort dates from newest (at the top) to oldest 

::: code-box
`arrange(df, desc(date_report))`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> ungroup() |> arrange(desc(date_report)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## Column names

::::::: columns
::: {.column width="60%"}
Just like object names, column names in R are case sensitive. 

R *requires* that column names:

-   Start with a letter, not a number
-   Are unique (two columns in a dataframe cannot have the same name)

It is *good practice* that column names:

-   Do not contain spaces or special characters other than underscores or periods
-   Are short and easy to understand
:::

::::: {.column width="40%"}
::: {style="background: #DAF7A650; width=120px; "}

- ‚úî age
- ‚úî sex
- ‚úî date_onset
:::

::: {style="background: #f5bcb150; width=120p;  "}

- ‚ùå 18_or_younger
- ‚ùå Sex
- ‚ùå Age in years
- ‚ùå age_in_days_round_t...
:::
:::::
:::::::


## Learning objectives

- ‚úî Understand logical evaluation and its role in data manipulation
- ‚úî Recognize different data classes and their importance in logical comparisons
- Learn key {dplyr} functions for data manipulation: `filter()`, `mutate()`, `group_by`, and `summarize()
- Learn how to chain functions together with pipes

