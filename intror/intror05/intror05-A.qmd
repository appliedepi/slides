---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    code-line-numbers: false
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
---

```{r}

# Packages
pacman::p_load(rio, here, janitor, dplyr, gtExtras, gt, tidyr, lubridate, stringr)

# Load data as needed 
df_raw <- import(here("intror/gi_2021-07-07_linelist.xlsx")) 

# Clean 

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |> 
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |> 
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  # Handle unexpected cases

df_end <- df |>  
  distinct(id, .keep_all = TRUE) |>
  
  # Combine some columns
  unite("date_of_birth", 
          c("birthyear", "month_of_birth", "daybirth"), sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |>
  mutate(date_report =  coalesce(told_on, reported, discovered, found_on, report)) |> 
    select(-told_on, -reported, -discovered, -found_on, -report) 

# Create the sub versions needed (df = as clean as appropriate for this module, _demo = filtered to fewer rows when need to show on slides)

df_raw_demo <- df_raw |> 
  filter(row_number()<6)

df_demo <- df |> 
  filter(row_number()<6)

```

# Module 5: Part A

## Module 5 learning objectives

In Part A you will:

-   Learn to deduplicate data
-   Learn to combine or split columns

In Part B you will:
-   Learn to derive date information from existing columns, using {lubridate} functions
-   Learn to derive information from existing columns and make new ones, using case_when(), if_else(), and stringr()
-   Learn about factor values

# Recap

## Your code {.exercise-slide}

We will continue our code from last time, adding more functions to clean the df object.

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate)

# Import data ------------------------------

# Linelist
df_raw <- import(here("data/gi_2021-07-07_linelist.xlsx"))

# Labs
df_lab_luh <- import(here("data/gi_2021-07-07_lab_luh.csv"))
df_lab_vnrl <- import(here("data/gi_2021-07-07_lab_vnrl.csv"))
df_lab_ghc <- import(here("data/gi_2021-07-07_lab_ghc.csv"))


# Clean linelist data ---------------------------

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |>
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |>
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  # Handle unexpected cases



```

## Glimpse data so far {.exercise-slide}

::: slide-header
{dplyr}
:::

::: {.code-box}
`glimpse(df)`
:::

::: {.arrow-box}
&#8595;
:::

::: {.general-box style="width: 1100px; max-height: 55vh; overflow-y: auto"}
```{r}
glimpse(df)
```
:::

# Deduplication

## distinct()

::: slide-header
{dplyr}
:::

- *Purpose*: Removes duplicate rows based on selected columns.
- *Why*: Ensures unique observations in a datase
- *Example*: You want to remove duplicate test results for the same person in a case linelist 

## distinct()

::: slide-header
{dplyr}
:::

*How*: 

To remove **exact duplicates**:

::: {.code-box-small style="width: 900px; font-size: 30px;"}
`data |> distinct()`
:::
<br>
To remove **partial duplicates** where rows have matching values in only col1 and col2. Add .keep_all to retain all the columns, not just those specified:

::: {.code-box-small style="width: 900px; font-size: 30px;"}
`data |> distinct(col1, col2, .keep_all = TRUE)`
:::

::: {.obs-box}
⚠️ **IMPORTANT!** The first row is kept when deduplicating with distinct() 
:::

## Example

::: slide-header
{dplyr}
:::

Deduplication of exact row matches:

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
example |> distinct()
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input
```{r}
example <- data.frame(
  name = c("Alice", "Bob", "Alice", "Charlie", "Bob", "Alice"),
  birthday = as.Date(c("1990-01-01", "1985-05-12", "1990-01-01", "1992-07-23", "1985-05-12", "1990-01-01")),
  test_result = c("Positive", "Negative", "Negative", "Positive", "Positive", "Negative"),
  report_date = as.Date(c("2023-01-21", "2023-01-16", "2023-01-20", "2023-01-18", "2023-01-19", "2023-01-20"))
)

example |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 

```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output
```{r}
example |> distinct() |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
:::
:::


## Example

::: slide-header
{dplyr}
:::

Deduplication of rows with the same name and birthday:

::: {.code-box-small style="width: 900px; font-size: 40px;"}
```{r echo=T, eval=F}
example |> distinct(name, birthday, .keep_all = T)
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input
```{r}
example |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 

```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output
```{r}
example |> distinct(name, birthday, .keep_all = T) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
:::
:::


## Example

::: slide-header
{dplyr}
:::

Deduplication of rows with the same name and birthday, but keeping the first test:

::: {.code-box-small style="width: 900px; font-size: 40px;"}
```{r echo=T, eval=F}
example |>
  arrange(report_date) |> 
  distinct(name, birthday, .keep_all = T)
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input
```{r}
example |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 

```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output
```{r}
example |>   arrange(report_date) |> 
  distinct(name, birthday, .keep_all = T) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
:::
:::


# Moving content between columns 

## unite()

::: slide-header
{tidyr}
:::


- *Purpose:* To bring values from multiple columns into a single column
- *Why:* To bring together scattered information in one variable
- *Example:* To combine first_name and last_name columns into one column
- *How:*

::: {.code-box style="width: 900px"}
```{r eval=F, echo=T}
data |> unite(new_column, c(col1, col2, ...), sep = "separator")
```
:::

::: {.obs-box}
⚠️ **NOTE** This will remove the original columns!
:::

## Example

::: slide-header
{tidyr}
:::

::: {.code-box-small style="width: 850px; font-size: 35px;"}
```{r eval=F, echo=T}
df <- df |>
  unite("date_of_birth", 
        c("birthyear", "month_of_birth", "daybirth"), sep = "-")
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
```{r}
df_demo |> clean_names() |> select(id, birthyear, month_of_birth, daybirth) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 20) 
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
```{r}

df_demo |> clean_names() |> select(id, birthyear, month_of_birth, daybirth) |> 
  unite("date_of_birth", 
        c("birthyear", "month_of_birth", "daybirth"), 
        sep = "-") |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 20) 

```
:::
:::
:::

::: {.fragment}
Now how do we make date_of_birth a date? 
:::


## Example

::: slide-header
{tidyr; lubridate}
:::

::: {.code-box-small style="width: 850px; font-size: 35px;"}
```{r eval=F, echo=T}
df <- df |>
  unite("date_of_birth", 
        c("birthyear", "month_of_birth", "daybirth"), sep = "-") |>
  mutate(date_of_birth = ymd(date_of_birth))
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
```{r}
df_demo |> clean_names() |> select(id, birthyear, month_of_birth, daybirth) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 20) 
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
```{r}

df_demo |> clean_names() |> select(id, birthyear, month_of_birth, daybirth) |> 
  unite("date_of_birth", 
        c("birthyear", "month_of_birth", "daybirth"), 
        sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 20) 

```
:::
:::
:::



## coalesce() 

:::incremental 

- *Purpose*: To replace missing values by taking the first non-missing value from multiple columns.
- *Why*: To fill in gaps in data using all available information spread across column
- *Example*: You have columns phone_primary and phone_backup, and want to create create a phone column that takes the first available number.
- *How*: Combine with mutate
:::

::: {.code-box-small .fragment style="width: 900px; font-size: 45px;"}
```{r eval=F, echo=T}
data |> mutate(new_column = coalesce(col1, col2, col3, ...))
```
:::

## Example

::: slide-header
{tidyr}
:::

<br>

::: {.code-box-small style="font-size: 38px;"}
```{r eval=F, echo=T}
df <- df |> 
  mutate(date_report = coalesce(told_on, reported, discovered, found_on, report))
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
```{r}
df_demo |> clean_names() |> select(id, told_on,
        reported,
        discovered,
        found_on,
        report) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 18) 
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
```{r}

df_demo |> clean_names() |> select(id, told_on,
        reported,
        discovered,
        found_on,
        report) |> 
  mutate(
    date_report = 
      coalesce(
        told_on,
        reported,
        discovered,
        found_on,
        report)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 18) 

```
:::
:::
:::

## Example

::: slide-header
{tidyr}
:::

<br>

::: {.code-box-small style="font-size: 38px;"}
```{r eval=F, echo=T}
df <- df |>
  mutate(date_report = coalesce(told_on, reported, discovered, found_on, report)) |>
  select(-told_on, -reported, -discovered, -found_on, -report)
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
```{r}
df_demo |> select(id, told_on,
        reported,
        discovered,
        found_on,
        report) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 18) 
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
```{r}

df_demo |> select(id, told_on,
        reported,
        discovered,
        found_on,
        report) |> 
  mutate(
    date_report = 
      coalesce(
        told_on,
        reported,
        discovered,
        found_on,
        report)) |> 
  select(-told_on, -reported, -discovered, -found_on, -report) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 18) 

```
:::
:::
:::
    
# Exercise

## QUIZ?

Because this is possibly shorter?

## Scenario {.exercise-slide}

::: incremental

Continue cleaning data! You will now:

- Deduplicate to one row per person in the data
- Combine columns together

:::

## Access the exercises {.exercise-slide}

Instructions here

# Recap

## Your code {.exercise-slide}

Your code should now look something like this:

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate)

# Import data ------------------------------

# Linelist
df_raw <- import(here("data/gi_2021-07-07_linelist.xlsx"))

# Labs
df_lab_luh <- import(here("data/gi_2021-07-07_lab_luh.csv"))
df_lab_vnrl <- import(here("data/gi_2021-07-07_lab_vnrl.csv"))
df_lab_ghc <- import(here("data/gi_2021-07-07_lab_ghc.csv"))

# Clean linelist data ---------------------------

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |>
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |>
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  |> 
  
  # Deduplicate to one row per case, based on case ID
  distinct(id, .keep_all = TRUE) |>
  
  # Combine some columns
  unite("date_of_birth", 
          c("birthyear", "month_of_birth", "daybirth"), sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |>
  mutate(date_report =  coalesce(told_on, reported, discovered, found_on, report)) |> 
    select(-told_on, -reported, -discovered, -found_on, -report) 



```

## Your data {.exercise-slide}

::: slide-header
{dplyr}
:::

::: {.code-box}
`glimpse(df)`
:::

::: {.arrow-box}
&#8595;
:::

::: {.general-box style="width: 1100px; max-height: 55vh; overflow-y: auto"}
```{r}
glimpse(df_end)
```
:::
