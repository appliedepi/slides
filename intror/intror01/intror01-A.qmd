---
title: "Module 1A"
subtitle: "Let's learn R!"
author: "[Applied Epi: Intro to R Course]"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
    title-slide-attributes:
      data-background-color: "#012d78"
      style: "font-size: 40px;"
      data-subtitle-style: "font-size: 80px;"  # Subtitle size
      data-author-style: "font-size: 10px;"  # Author size
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

# Introduction to R

## Welcome!

-   A bit about Applied Epi
-   Course objectives

## About this course

-   Modules
-   Tutoring
-   Support Desk
-   Rules of engagement

# Module 1: Part A

## Learning objectives

In *Part A* you will:

-   Be introduced to the power of R in applied epidemiology
-   Explore three key concepts: code, functions, and assignment
-   Practice running code with numeric and character values

In *Part B* you will you dive further into functions:

-   Be shown how functions are structured and organized in packages
-   Get an overview of key functions from {base} R, {dplyr}, and {janitor}
-   Practice running and writing simple code to quickly summarize data

# Power of R

## About R

-   *What is R:* R is a free and open-source programming language for
    statistical computing and graphics.
-   Talk about benefits
-   Mention cost/benefit analysis

## Scenario {.exercise-slide}

::: incremental
-   *You*: You are an epidemiologist working in a surveillance unit
    located in the country **Viraland**

-   *Outbreak!* Last week an outbreak of severe gastro-intestinal
    disease was detected in your area. Cholera is suspected.

-   *Investigation*: Your team is monitoring the outbreak, including
    collecting case data from local clinics.

-   *Let's take a look* at the situation reports in R that your
    colleague Pragya has created!
:::

## Demo {.exercise-slide}

## Scenario {.exercise-slide}

::: incremental
-   But now... Pragya is now on holiday.

-   The outbreak continues, so your boss has asked you to be responsible
    for reporting!

-   Using R!
:::

# Let's get started: Code and functions!

## What is code?

::: fragment
-   *Code:* Instructions in a specific language telling a computer how
    to perform a task
:::

::::::::::::::: {.fragment width="100%"}
-   Code processes an *input* to produce an *output*

:::::::::::::: columns
::: {style="margin-bottom: 4px;"}
:::

:::: {.column width="30%"}
::: input-box
**Input**
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="30%"}
::: code-box-small
**Code**
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="30%"}
::: output-box
**Output**
:::
::::
::::::::::::::
:::::::::::::::

::: {.fragment style="text-align: right;"}
<br> In R you will be typing your code. <br> Don't worry, you'll get
used to it!
:::

## Code can be as simple as...

¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace -->

::::::::::::: columns
::: {.column width="20%"}
:::

::::: {.column width="25%"}
::: code-box-small
**Code:** <br> `1 + 1`
:::

¬† <!-- This adds a linespace -->

::: code-box-small
**Code:** <br> `2 * 3`
:::
:::::

::::: {.column width="5%"}
::: arrow-box
‚Üí
:::

¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ¬†
<!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ¬†
<!-- This adds a linespace --> ¬† <!-- This adds a linespace -->

::: arrow-box
¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ‚Üí
:::
:::::

::::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::

¬† <!-- This adds a linespace -->

::: output-box
**Output:** <br> `6`
:::
:::::
:::::::::::::

::: {style="text-align: right;"}
<br> This take numbers as inputs! <br> Mathematical operators work in R
code.
:::

## Code can also be...

¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace -->

::::::::::::: columns
::: {.column width="20%"}
:::

::::: {.column width="25%"}
::: code-box-small
**Code:** <br> `sum(1, 1)`
:::

¬† <!-- This adds a linespace -->

::: code-box-small
**Code:** <br> `prod(2, 3)`
:::
:::::

::::: {.column width="5%"}
::: arrow-box
‚Üí
:::

¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ¬†
<!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ¬†
<!-- This adds a linespace --> ¬† <!-- This adds a linespace -->

::: arrow-box
¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ‚Üí
:::
:::::

::::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::

¬† <!-- This adds a linespace -->

::: output-box
**Output:** <br> `6`
:::
:::::
:::::::::::::

::: {style="text-align: right;"}
<br> We can instruct R in different ways for the same result (just like
with humans!) <br> Instructions with words are called...
:::

## Functions

-   *Function:* A reusable piece of code that performs a specific task
-   Functions look like this:

![](images/function.png)

## R functions

-   For example, the sum() function in R adds numbers together:

<br>

:::::::::: columns
::: {.column width="20%"}
:::

:::: {.column width="25%"}
::: code-box-small
**Code:** <br> `sum(1,1)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::
::::
::::::::::

## R functions

Here are other important functions that come with R:

::::::::::::::::::::::: columns
::: {style="margin-bottom: 4px;"}
:::

::::::: {.column width="25%"}
*Code*:

::: {style="margin-bottom: 4px;"}
:::

::: code-box-small
`max(1,3,5)`
:::

<br>

::: code-box-small
`min(1,3,5)`
:::

<br>

::: code-box-small
`c(1,3,5)`
:::
:::::::

:::::: {.column width="5%"}
::: arrow-box
<br> ‚Üí
:::

<br>

::: arrow-box
<br> ‚Üí
:::

<br>

::: arrow-box
<br> ‚Üí
:::
::::::

::::::: {.column width="25%"}
*Output*:

::: {style="margin-bottom: 4px;"}
:::

::: output-box
`5`
:::

¬† <!-- This adds a linespace -->

::: output-box
`1`
:::

¬† <!-- This adds a linespace -->

::: output-box
`1 3 5`
:::
:::::::

::::::: {.column width="40%"}
::: fragment
<br> `max()` calculates the **maximum** of a series of numbers
:::

<br>

::: fragment
`min()` calculates the **minimum** of a series of numbers
:::

<br>

::: fragment
`c()` **combines** a series of values into a **vector**
:::

::: {.obs-box .fragment}
üí° **NOTE**: A vector is a list of values of the same class (e.g. all
numbers or all characters)
:::
:::::::
:::::::::::::::::::::::

# Introducing classes in R

## Classes

::: incremental
-   The examples you have seen show functions manipulating *numeric*
    values.
-   But there are other value types (classes), most obviously
    *character* values.
:::

:::::::::::::::: {.columns .fragment}
::: {style="margin-bottom: 4px;"}
:::

::: {.column width="10%"}
:::

:::::: {.column width="40%"}
<br>

::: {style="margin-bottom: 4px;"}
:::

::: code-box-small
`c(10,20,30)`
:::

<br>

::: code-box-small
`c("Hello","Hi","Wave")`
:::
::::::

:::::: {.column width="5%"}
:::: arrow-box
<br>

::: {style="margin-bottom: 4px;"}
:::

‚Üí
::::

<br>

::: arrow-box
<br> ‚Üí
:::
::::::

::::: {.column width="45%"}
::: {style="margin-bottom: 4px;"}
:::

::: {style="margin-bottom: 4px;"}
:::

<br> This `c()` function combines numeric values <br><br>

This `c()` function combines character values <br>
:::::
::::::::::::::::

::: {.general-box .fragment style="text-align: right; color: #4eba70;"}
<br> ‚ùî**QUIZ**: How does R distinguish between <br> numeric and
character values?
:::

## Classes

::: incremental
-   R recognises text in quotation marks as character values ("like
    this")
-   This is important, for example:
:::

:::::::::::::: {.columns .fragment}
::: {style="margin-bottom: 4px;"}
:::

::: {.column width="10%"}
:::

:::::: {.column width="30%"}
*Code*:

::: {style="margin-bottom: 4px;"}
:::

::: code-box-small
`sum(1,2,3)`
:::

<br>

::: code-box-small
`sum("1","2","3")`
:::
::::::

::::: {.column width="5%"}
::: arrow-box
<br> ‚Üí
:::

<br>

::: arrow-box
<br> ‚Üí
:::
:::::

::: {.column width="55%"}
<br> This will work, as these are numeric values <br> <br> <br>

This will not work, as these are recognised as character values. <br>
:::

::: {.obs-box .fragment}
üí° **NOTE**: If you try this code, R will say: <br>
`"Error in sum("1", "2", "3") : invalid 'type' (character) of argument"`
:::
::::::::::::::

# Printing and assigning

## Printing vs assigning

-   So far you have been **printing** (displaying) your outputs
-   R can store inputs and outputs if you **assign** them to an
    **object** like this:

![](images/assignment.png)

## Printing vs assigning

*For example:*

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}
Print:

::: code-box-small
`min(1,3,5)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> ‚Üí
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
`1`
:::
::::
::::::::::

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}
Assign object:

::: code-box-small
`y <- min(1,3,5)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> ‚Üí
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
**\[No printed output\]**
:::
::::
::::::::::

:::::::::: {.columns .fragment}
::: {.column width="10%"}
:::

:::: {.column width="45%"}
Then you can print the object!

::: code-box-small
`y`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> ‚Üí
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
`1`
:::
::::
::::::::::

## Code can be long...

![](images/longcode.png)

## But code can also be powerful!

-   Don't get intimidated
-   Just remember this structure:

¬† <!-- This adds a linespace -->

::::::::::::: columns
:::: {.column width="30%"}
::: input-box
**Input**
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="30%"}
::: code-box-small
**Code**
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="30%"}
::: output-box
**Output**
:::
::::
:::::::::::::

# Exercises

## Explanation {.exercise-slide}

You will now start running and writing code online. The exercises look like this:

![](images/terminal.png){fig-align="center"}

::: {.obs-box .fragment}
üí° **NOTE**: The code output box is designed to look like the **console** in RStudio! The [1] means that this is the first element of the output
:::

## Tasks {.exercise-slide}

Go to XXXXXXX link

-   *Part 1:* Play with Pragya's plots in R
-   *Part 2:* Practice running code
-   *Part 3:* Practice assigning and printing objects

# Recap

## Recap

You have learned that:

::: incremental

- *Functions* are pieces of code that take *inputs* and produce *outputs*
- Helpful examples of functions in R are `sum()`, `min()`, `max()`, and `c(`)`
- You can *print* functions, or *assign* a function output to an *object*
- You can interact objects together 
- You can edit code but you must *run* it to take effect!
:::

## Quiz

You also learned to differentiate between values of *numeric* and *character class*.

## Quiz

You also learned to differentiate between values of *numeric* and *character class*.

Match the rectangles to the circles!

![](images/test.png)

## Quiz answers!

You also learned to differentiate between values of *numeric* and *character class*.

Match the rectangles to the circles!

![](images/test_answers.png)

## Object names

::::::: columns
::: {.column width="60%"}
**R requires that object names: **

- Start with a letter, not a number 
- Do not contain any spaces

**It is best practice that object names:**

- Do not contain special characters other than underscores or periods
- Are short and easy to understand 
- Do not have the same name as an existing function
- Are lower-case (R is case-sensitive!)
:::

::::: {.column width="40%"}
::: {style="background: #DAF7A650; width=120px; "}
‚úî x

‚úî df

‚úî data_raw

‚úî data_clean
:::

::: {style="background: #f5bcb150; width=120p;  "}
‚ùå 12x

‚ùå median

‚ùå data_almost_ready_for...
:::
:::::
:::::::
