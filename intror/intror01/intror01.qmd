---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

```{r}
## colours
aeblue <- "#012d78"

```

# Introduction to R

## Welcome!

-   A bit about Applied Epi
-   Course objectives

## About this course

-   Modules
-   Tutoring
-   Support Desk
-   Rules of engagement

# Module 1

## Learning objectives

-   Understand power of R in applied epidemiology
-   Understand three key concepts: code, functions, assignment
-   Understand how functions are structured and organized in packages
-   Get introduced to key functions from base, {dplyr}, and {janitor}
-   Get familiar with running and writing simple code to quickly summarize data

# Power of R

## About R

-   *What is R:* R is a free and open-source programming language for
    statistical computing and graphics.
-   Talk about benefits
-   Mention cost/benefit analysis


## Scenario {.exercise-slide}

::: incremental

- *You*: You are a local epidemiologist working in a surveillance
unit located in the South of Nepal.

- *Outbreak!*: Last week an outbreak of severe
gastro-intestinal disease was detected in your area. Cholera is
suspected.

- *Investigation*: Your team is monitoring the outbreak, and sent out electronic questionnaires to local clinics to collect case information.

<br>
:::

## Demo {.exercise-slide}

::: incremental

- Your colleague, Pragya, was manually cleaning the data and creating situations reports using R. 

- *Let's take a closer look at her sitrep code!*

- See how the sitrep code allows her to click a button to create a whole report with tables, figures, and text!

:::

## Scenario {.exercise-slide}

::: incremental

- But... Pragya is now on holiday.

- The outbreak continues, so your boss has asked you to be responsible for reporting!

- Using R!

:::

# Let's get started: Code and functions!

## What is code?

-   *Code:* Instructions in a particular language telling a computer how to perform a task
-   Code processes an *input* to produce an *output*
-   In R, you will be typing and running your code (you will get used to it!)

  <!-- This adds a linespace -->

::::::::::::: columns
:::: {.column width="30%"}
::: input-box
**Input**
:::
::::

:::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="30%"}
::: code-box-small
**Code**
:::
::::

:::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="30%"}
::: output-box
**Output**
:::
::::
:::::::::::::

## Code can be as simple as...

  <!-- This adds a linespace -->   <!-- This adds a linespace -->

::::::::::::: columns
::: {.column width="20%"}
:::

::::: {.column width="25%"}
::: code-box-small
**Code:** <br> `1 + 1`
:::

  <!-- This adds a linespace -->

::: code-box-small
**Code:** <br> `2 * 3`
:::
:::::

::::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::

  <!-- This adds a linespace -->   <!-- This adds a linespace -->  
<!-- This adds a linespace -->   <!-- This adds a linespace -->  
<!-- This adds a linespace -->   <!-- This adds a linespace -->

::: arrow-box
  <!-- This adds a linespace -->   <!-- This adds a linespace -->
`r r2symbols::symbol(3)`
:::
:::::

::::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::

  <!-- This adds a linespace -->

::: output-box
**Output:** <br> `6`
:::
:::::
:::::::::::::

::: {style="text-align: right;"}
<br> This take numbers as inputs! <br> Mathematical operators work in R
code.
:::

## Code can also be...

  <!-- This adds a linespace -->   <!-- This adds a linespace -->

::::::::::::: columns
::: {.column width="20%"}
:::

::::: {.column width="25%"}
::: code-box-small
**Code:** <br> `sum(1, 1)`
:::

  <!-- This adds a linespace -->

::: code-box-small
**Code:** <br> `prod(2, 3)`
:::
:::::

::::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::

  <!-- This adds a linespace -->   <!-- This adds a linespace -->  
<!-- This adds a linespace -->   <!-- This adds a linespace -->  
<!-- This adds a linespace -->   <!-- This adds a linespace -->

::: arrow-box
  <!-- This adds a linespace -->   <!-- This adds a linespace -->
`r r2symbols::symbol(3)`
:::
:::::

::::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::

  <!-- This adds a linespace -->

::: output-box
**Output:** <br> `6`
:::
:::::
:::::::::::::

::: {style="text-align: right;"}
<br> We can instruct R in different
ways for the same result (just like with humans!) <br> Instructions with words are called...
:::

## Functions

- *Function:* A reusable piece of code that performs a specific task
- Functions look like this:

![](images/function.png)

## R functions

-   For example, the sum() function in R adds numbers together:

<br>

:::::::::: columns
::: {.column width="20%"}
:::

:::: {.column width="25%"}
::: code-box-small
**Code:** <br> `sum(1,1)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::
::::
::::::::::

## R functions

- R comes with many other functions
- Often the function name tells you what it does, e.g:

::::::::::::: columns

::: {.column width="20%"}
:::

::::: {.column width="25%"}
::: code-box-small
**Code:** <br> `max(1,3,5)`
:::

  <!-- This adds a linespace -->

::: code-box-small
**Code:** <br> `sqrt(16)`
:::
:::::

::::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::

  <!-- This adds a linespace -->   <!-- This adds a linespace -->  
<!-- This adds a linespace -->   <!-- This adds a linespace -->  
<!-- This adds a linespace -->   <!-- This adds a linespace -->

::: arrow-box
  <!-- This adds a linespace -->   <!-- This adds a linespace -->
`r r2symbols::symbol(3)`
:::
:::::

::::: {.column width="25%"}
::: output-box
**Output:** <br> `5`
:::

  <!-- This adds a linespace -->

::: output-box
**Output:** <br> `4`
:::
:::::
:::::::::::::

## Code can be long...

![](images/longcode.png)

## But code can also be powerful!

- Don't get intimidated
- Just remember this structure:


  <!-- This adds a linespace -->

::::::::::::: columns
:::: {.column width="30%"}
::: input-box
**Input**
:::
::::

:::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="30%"}
::: code-box-small
**Code**
:::
::::

:::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="30%"}
::: output-box
**Output**
:::
::::
:::::::::::::

# Exercises: code and functions

## Tasks {.exercise-slide}

Go to XXXXXXX link

- *Part 1:*  Play with Pragya's plots in R
- *Part 2:*  Practice running code

# Printing and assigning

## Printing vs assigning

- So far you have been **printing** (displaying) your outputs
- R can store inputs and outputs if you **assign** them to an **object** like this:


![](images/assignment.png)

## Printing vs assigning

*For example:*

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}
Print:

::: code-box-small
`sum(1,1)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> `r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
`2`
:::
::::
::::::::::

:::::::::: columns

::: {.column width="10%"}
:::

:::: {.column width="45%"}
Assign object:

::: code-box-small
`x <- sum(1,1)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> `r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
**\[No printed output\]**
:::
::::
::::::::::


## Printing vs assigning

-   You can also print an object after assigning it!

:::::::::: columns

::: {.column width="10%"}
:::

:::: {.column width="45%"}
Assign number to object:

::: code-box-small
`y <- 3`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> `r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
**\[No printed output\]**
:::
::::
::::::::::

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}
Print object:

::: code-box-small
`y`
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br> <br> `r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
`3`
:::
::::
::::::::::

## Object names

::::::: columns
::: {.column width="60%"}
Object names are case sensitive and R has some rules.

R requires that object names:
-   Start with a letter, not a number
-   Do not contain any spaces

It is best practice that column names:
-   Do not contain special characters other than underscores or periods
-   Be short and easy to understand
-   Do not have the same name as an existing function
:::

::::: {.column width="40%"}
::: {style="background: #DAF7A650; width=120px; "}
✔ x

✔ df

✔ data_raw

✔ data_clean
:::

::: {style="background: #f5bcb150; width=120p;  "}
❌ 12x

❌ median

❌ data_almost_ready_for...
:::
:::::
:::::::

# Exercises: assigning objects

## Tasks {.exercise-slide}

Go to XXXXXXX link

*Part 3:* Practice assigning and printing objects

# Recap

## Learning objectives

We've talked about:

-   ✔ Understand power of R in applied epidemiology
-   ✔ Understand three key concepts: code, functions, assignment

Next we will:

-   Understand how functions are structured and organized in packages
-   Get introduced to key functions from base, {dplyr}, and {janitor}
-   Get familiar with running and writing simple R code to quickly summarize data
