---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
---

```{r}
## colours
aeblue <- "#012d78"

```

# Introduction to R

## Welcome!

- A bit about Applied Epi
- Course objectives

## About this course

- Modules
- Tutoring 
- Support Desk
- Rules of engagement

# Module 1

## Learning objectives

- Understand power of code in terms of reproducibility, time saving and efficiency, collaboration, scalability, and quality of outputs
- Understand how code generally works, with inputs and outputs
- Understand the difference between printing and assigning
- Get acquainted with running code

# Power of R

## About R

- *What is R:* R is a free and open-source programming language for statistical computing and graphics. R is widely used among statisticians and provides access to a wide range of state of the art statistical and graphical techniques. 
- Talk about benefits
- Mention cost/benefit analysis

## Examples of R outputs

- Run demo here?

# Let's get started!

## What is code? 

- *Code:* Instructions in a particular language telling a computer how to perform a task
- Code processes an *input* to produce an *output*
- In R, you will be typing and running your code (you will get used to it!)

  <!-- This adds a linespace -->

::: columns
::: {.column width="30%"}
::: input-box
**Input**
:::
:::

::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="30%"}
::: code-box-small
**Code**
:::
:::

::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="30%"}
::: output-box
**Output**
:::
:::
:::

## Code can be as simple as...

  <!-- This adds a linespace -->
  <!-- This adds a linespace -->

::: columns

::: {.column width="20%"}
:::

::: {.column width="25%"}
::: code-box-small
**Code:** <br>
1 + 1
:::

  <!-- This adds a linespace -->

::: code-box-small
**Code:** <br>
2 * 3
:::
:::

::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->

::: arrow-box
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="25%"}
::: output-box
**Output:** <br>
2
:::
  <!-- This adds a linespace -->

::: output-box
**Output:** <br>
6
:::
:::
:::


<div style="text-align: right;">
<br>
This take numbers as inputs!  <br>
Mathematical operators work in R code.
</div>

## Functions

- *Function:* A reusable piece of code that performs a specific task
- Functions are written like this, with parentheses: 
<br>
<br>

::: columns
::: {.column width="30%"}
:::

::: {.column width="40%"}
::: code-box-small
**FunctionName(inputs)**
:::
:::

:::

## Examples of R functions

- R comes with many functions ("base R" functions)
- For example, the sum() function adds numbers together:

<br>

:::: columns
::: {.column width="20%"}
:::

::: {.column width="25%"}
::: code-box-small
**Code:** <br>
sum(1,1)
:::
:::

::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="25%"}
::: output-box
**Output:** <br>
2
:::
:::

::::

## Examples of R functions

- Here are other base R functions that take numbers as inputs:


::: columns

::: {.column width="20%"}
:::

::: {.column width="25%"}
::: code-box-small
**Code:** <br>
max(1,3,5)
:::

  <!-- This adds a linespace -->

::: code-box-small
**Code:** <br>
min(1,3,5)
:::
:::

::: {.column width="5%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->

::: arrow-box
  <!-- This adds a linespace -->
  <!-- This adds a linespace -->
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="25%"}
::: output-box
**Output:** <br>
5
:::
  <!-- This adds a linespace -->

::: output-box
**Output:** <br>
1
:::
:::
:::

## Printing vs assigning

- The examples so far *print* (display) the function outputs
- You can *create saved "objects"* with the *"assignment operator"*, which is an arrow pointing left: *<-*
<br>
<br>

:::: columns
::: {.column width="15%"}
:::

::: {.column width="45%"}
::: code-box-small
**x <- sum(1,1)**
:::
:::

:::

<div style="text-align: right;">
<br>
Whatever is on the right of the arrow is "assigned" <br> to the name of the object on the left 
</div>




## Printing vs assigning

- **R remembers** assigned objects. So you can print an object after assigning it!

::::: columns

:::: {.column width="10%"}
::::

:::: {.column width="45%"}
Print output directly:

::: code-box-small
**sum(1,1)**
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br>
<br>
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
**2**
:::
::::
:::::


::::: columns

:::: {.column width="10%"}
::::

:::: {.column width="45%"}
Assign output to object:

::: code-box-small
**x <- sum(1,1)**
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br>
<br>
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
**[No printed output]**
:::
::::
:::::

::::: columns

:::: {.column width="10%"}
::::

:::: {.column width="45%"}
Print object:

::: code-box-small
**x**
:::
::::

:::: {.column width="5%"}
::: arrow-box
<br>
<br>
`r r2symbols::symbol(3)`
:::
::::

:::: {.column width="35%"}
<br>

::: output-box
**2**
:::
::::
:::::

# Exercises

## Scenario

*Situation*: You are a local epidemiologist working in a surveillance unit located in the South of Nepal. Last week an outbreak of severe gastro-intestinal disease was detected in your area. Cholera is suspected.

**Response:** Your team has sent out electronic surveys to local clinics to collect case information. Your colleague, Pragya, was responsible for manually cleaning the data and analysing it using R. 

But... she is now on holiday, and you are her replacement! Let's take a closer look at her code and start running functions in R. 

## Sitreps in R

Let's take a look at Pragya's two sitreps made in R

## Tasks

You're not quite ready to edit Pragya's code yet.

For now:

1) Play with Pragya's plots in R
2) Practice running code 

# Review

## Add key points here

## Object names

::::: columns

:::: {.column width="60%"}

Object names should...

- Start with a letter, not a number
- Not contain any spaces
- Not contain special characters other than underscores or periods
- Be short and easy to understand
- Not be the same name as an existing function 
::::

:::: {.column width="40%"}
<div style="background: #DAF7A650; width=120px; ">
&#10004; x

&#10004; df

&#10004; data_raw

&#10004; data_clean
</div>

<div style="background: #f5bcb150; width=120p;  ">
&#10060; 12x

&#10060; median

&#10060; data_almost_ready_for...
</div>
:::: 
:::::
