---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    code-line-numbers: false
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

```{r}

# Packages
pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate, gtExtras, gt, tidyr, ggplot2)

# Load data as needed 
df_raw <- import(here("intror/gi_2021-07-07_linelist.xlsx")) 

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |>
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |>
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  |> 
  
  # Deduplicate to one row per case - EDIT THIS??
  distinct() |>
  
  # Combine some columns
  unite("date_of_birth", 
          c("birthyear", "month_of_birth", "daybirth"), sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |>
  mutate(date_report =  coalesce(told_on, reported, discovered, found_on, report)) |> 
    select(-told_on, -reported, -discovered, -found_on, -report) |>
  
  # Create columns labelling diarrhoea or dehydration
  mutate(symptoms = str_to_lower(symptoms),
         symp_diarrhea = str_detect(symptoms, "diarrhoea|diarrhea|watery stool|loose stool|awd"),
         symp_dehydration = str_detect(symptoms, "dehydra|lack of fluids|lack fluids")) |>
  
  # Create case definition column
  mutate(case_def = case_when(cholera_rdt_positive==1 ~ "Probable",
                              symp_diarrhea ==TRUE & symp_dehydration==TRUE ~ "Suspected", 
                              TRUE ~ "Unclear")) |> 
  
  # Create week column for onset date
 # mutate(date_onset_week = floor_date(date_onset, "week")) |> 
  
  # Create week column for report date
  mutate(date_report_week = floor_date(date_report, "week")) 
  

```

# Module 7: Part A

## Learning objectives



# Recap

# Bringing data together

*Brainstorm!* 

Why do we bring different datasets together?

::: incremental

- Combining data submissions from different sources into one dataframe:
   - E.g. different clinic sites submitting clinical datasets
   - Or different labs submitting test results 
- Joining different types of data for a more complete epidemiological picture and wider analysis
  - E.g. joining survey data and lab result data for a case-control study

:::

# Appending and joining

# Appending

## bind_rows()

::: slide-header
{dplyr}
:::


- *Purpose*: Stack data frames on top of each other (row-wise).
- *Why*: To combine subsets of a wider dataframe together and enable more complete analysis
- *Example*: Combine dataframes with test results from different labs testing in the same outbreak
- *How*: 

::: code-box
```{r eval=F, echo=T}
df_combined <- bind_rows(df1, df2)
```
:::


::: {.obs-box .fragment}
ðŸ’¡ **NOTE** This function will work even if datasets have different numbers of columns. But column names have to match exactly to successfully append!
:::

# Joining

## left_join()

::: slide-header
{dplyr}
:::

- *Purpose*: Merge two datasets, keeping all rows from the left table.
- *Why*: Use when you want to keep all observations from one dataset and bring in matching data from another.
- *Example*: You want to add test results to a dataframe of survey data, while keeping all survey data. 
- *How*: 

::: code-box
```{r eval=F, echo=T}
df_joined <- left_join(df1, df2, by = "id")
```
:::


::: {.obs-box .fragment}
ðŸ’¡ **NOTE** Rows from `df2` with a matching id as a row in `df1` will be joined.
:::

## left_join()

We will look at two small example dataframes:

![](images/start_join.png){style="display: block; margin: auto; width: 100%;"}

## left_join()

::: code-box
```{r eval=F, echo=T}
df_joined <- left_join(df_survey, df_lab, by = "id")
```
:::

![](images/left_join.png){style="display: block; margin: auto; width: 100%;"}

## full_join()

::: slide-header
{dplyr}
:::

- *Purpose*: Merge two datasets, keeping all rows from both tables.
- *Why*: This may allow you to have more complete data, or to conduct more detailed on analyses of matches.  
- *Example*: You have clinic attendance and lab results for a disease. Some cases lack lab tests, and some positive tests are unreported cases. You want to merge both datasets to keep all records for an accurate case count.
- *How*: 


::: code-box
```{r eval=F, echo=T}
df_joined <- full_join(df1, df2, by = "id")
```
:::

## left_join()

::: code-box
```{r eval=F, echo=T}
df_joined <- full_join(df_survey, df_lab, by = "id")
```
:::

![](images/full_join.png){style="display: block; margin: auto; width: 100%;"}

## anti_join()

::: slide-header
{dplyr}
:::

- *Purpose*: Return rows from the left dataframe that do **not** have a match in the right dataset.
- *Why*: Use when you want to find missing or unmatched data.
- *Example*: You want to specifically review which cases in a clinical linelist do not have lab results. 
- *How*: 

::: code-box
```{r eval=F, echo=T}
df_unmatched <- anti_join(df1, df2, by = "id")
```
:::

## antijoin()

::: code-box
```{r eval=F, echo=T}
df_joined <- anti_join(df_survey, df_lab, by = "id")
```
:::

![](images/anti_join.png){style="display: block; margin: auto; width: 100%;"}

# Common issues

## Multiple identifiers

## Identifiers with different names

## Duplicate ids

# Exercise

## Scenario {.exercise-slide}

::: incremental
:::

## Access the exercises {.exercise-slide}

Instructions here

# Recap


## Your code {.exercise-slide}

Your code should now look like this!

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate, tidyr)

# Import data ------------------------------

# Linelist
df_raw <- import(here("data/gi_2021-07-07_linelist.xlsx"))

# Labs
lab_luh <- import(here("data/gi_2021-07-07_labLUH.csv"))
lab_nvrl <- import(here("data/gi_2021-07-07_labLUH.csv"))
lab_ghc <- import(here("data/gi_2021-07-07_labLUH.csv"))

# Clean data ---------------------------

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |>
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |>
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  |> 
  
  # Deduplicate to one row per case - EDIT THIS??
  distinct() |>
  
  # Combine some columns
  unite("date_of_birth", 
          c("birthyear", "month_of_birth", "daybirth"), sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |>
  mutate(date_report =  coalesce(told_on, reported, discovered, found_on, report)) |> 
    select(-told_on, -reported, -discovered, -found_on, -report) |>
  
  # Create columns labelling diarrhoea or dehydration
  mutate(symptoms = str_to_lower(symptoms),
         symp_diarrhea = str_detect(symptoms, "diarrhoea|diarrhea|watery stool|loose stool|awd"),
         symp_dehydration = str_detect(symptoms, "dehydra|lack of fluids|lack fluids")) |>
  
  # Create case definition column
  mutate(case_def = case_when(cholera_rdt_positive==1 ~ "Probable",
                              symp_diarrhea ==TRUE & symp_dehydration==TRUE ~ "Suspected", 
                              TRUE ~ "Unclear")) |> 
  
  mutate(case_def = factor(case_def, levels = c("Unclear", "Suspected", "Probable"))) |> 
  
  # Create week column for onset date
 # mutate(date_onset_week = floor_date(date_onset, "week")) |> 
  
  # Create week column for report date
  mutate(date_report_week = floor_date(date_report, "week")) 
  

  

# Plots ------------------------------------------

# By report date and case definition breakdown
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def))

# By report date and case definition breakdown and region
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def)) +
  facet_wrap(.~region)


```



## Learning objectives
