---
title: "Module 3B"
subtitle: "RStudio Projects and importing data"
author: "[Applied Epi: Intro to R Course]"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
    title-slide-attributes:
      data-background-color: "#012d78"
      style: "font-size: 40px;"
      data-subtitle-style: "font-size: 80px;"  # Subtitle size
      data-author-style: "font-size: 10px;"  # Author size
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

## Module 3 learning objectives

In *Part A* you:

- Started using RStudio, including running and writing code in tidy R scripts
- Started installing and loading R packages using {pacman} and {base}

In *Part B* you will:

- Start managing your work using RStudio Projects 
- Import data using relative file paths with {rio} and {here}.


# Let's load some data...

## Scenario {.exercise-slide}

::: incremental

- Pragya emailed you a folder of her scripts and data before she went on holiday. 
- She suggests that you keep working in the same folder: gi. 
- Let's take a look!

:::


## {rio} for loading data

-   The {rio} package enables simple importing and exporting of data (the developers call it "the Swiss-army knife of importing and exporting of data"!)
-   The `import()` function can import many different file types: .csv, .xlsx, .dta, etc...

![](/images/rio.png){fig-align="center"}

## {rio} for loading data

-   Let's take a look at Pragya's sitrep code.
-   She has sent you a folder called 'gi', in which she has sub-folders for her scripts and her data

![](/images/folder.png){fig-align="center"}

## {rio} for loading data

- The start of Pragya's sitrep code is below
- You can see she loads two different files of different types using the import function

```{r, echo=T, eval=F}
# Load packages
pacman::p_load(rio, dplyr, janitor, ggplot2)

# Import data
linelist <- import("C:/Users/Pragya.Roy/Documents/gi/data/linelist_clean_2024-05-10.csv")
symptoms <- import("C:/Users/Pragya.Roy/Documents/gi/data/symptoms_2024-05-10.xlsx")
```
<br>

::: incremental
- Do you think this code will work on your computer?
:::

## Absolute file paths

Pragya's code uses absolute file paths that specify the exact location on her computer; this will not work on yours.

- *Absolute File Path*: Full path starting from the root directory (e.g., C:/Users/...).
- *Relative File Path*: Path relative to the working directory (e.g., data/my_file.csv). These are easier to share and avoids hardcoding machine-specific paths.

Let's see how to create relative file-paths with RStudio Projects

# RStudio Projects

## What are RStudio Projects?

::::::: columns
:::: {.column width="65%"}

RStudio Projects help you organize your work by:

- Creating a *dedicated folder* for your scripts, data, and outputs
- Automatically setting the project folder as the *working directory*
- Including an *.Rproj file* that links your files to the project

This means your project files are organized, your code has shorter file paths, and the code is "portable" across computers.

::::

:::: {.column width="2%"}
::::

:::: {.column width="33%"}

Example:

::: {.general-box style="font-size: 15px !important; background-color: #ebebeb; padding: 10px;"}

- üìÅ FluAnalysis
   - FluAnalysis.Rproj
   - üìÅ data
      - üìÉ epidata.csv
      - üìÉ labdata.csv
   - üìÅ scripts
      - üìÑ analysis.R
::::

::::

:::::::

## Setting up an RStudio Project

As Pragya's folder doesn't have an RStudio project, let's set one up!

## Setting up an RStudio Project

As Pragya's folder doesn't have an RStudio project, let's set one up!

We start by clicking on this button in RStudio:


![](/images/rproject1.png){fig-align="center"}

##

As a folder already exists...

![](/images/rproject2.png){fig-align="center"}

##

![](/images/rproject3.png){fig-align="center"}

## {rio} for loading data

- Now that the folder has an RStudio Project, the filepaths can be shortened, because R knows that it needs to start looking in the root folder gi.

<br>

```{r, echo=T, eval=F}
# Load packages
pacman::p_load(rio, dplyr, janitor, ggplot2)

# Import data
linelist <- import("data/linelist_clean_2024-05-10.csv")
symptoms <- import("data/symptoms_2024-05-10.xlsx")
```
<br>

## Using here()

- Sometimes R can still get confused with the root folder, particularly if you are running scripts within sub-folders. 
- So you can use here() from the {here} package to create file paths that are relative to the root directory of an R project. 
- This will be more relevant when you are creating reporting workflows, but good to get used to it now. 

<br>

```{r, echo=T, eval=F}
# Load packages
pacman::p_load(rio, dplyr, janitor, ggplot2)

# Import data
linelist <- import(here("data/linelist_clean_2024-05-10.csv"))
symptoms <- import(here("data/symptoms_2024-05-10.xlsx"))
```
<br>


## Closing and opening R Projects

- When you are done with your work, save your script (click 'save' in the File menu, or press Ctrl + S)
- You can then exit RStudio by clicking the x in the top right corner
- To open again, click on the .Rproj file to go straight into the project


# Organizing yourself

## Tidy file names

More here on files and folder names?

# Exercise

## Scenario {.exercise-slide}

::: incremental

- It‚Äôs now 17th June, several weeks later. There is new clinic data and now lab data.
- Your junior colleagues are no longer able to manually clean the data in excel because it's too time consuming.
- Instead, you get an email with the *full raw data* from the beginning of the outbreak. You need to automate the cleaning!
- You have downloaded the data and put it in the 'data' folder of your project.
   - The updated file: **gi_2021-06-05_linelist.xlsx** 
   - Three files with laboratory results, one per laboratory: **gi_2021-06-17_lab_luh.csv**, **gi_2021-06-17_lab_vnrl.csv**, **2021-06-17_lab_ghc.csv** 
   


- *Import the data!*


:::

## Access the exercises {.exercise-slide}

Instructions here

# Recap

## Loading packages and importing data

Your code should now look something like this:

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr)

# Import data ------------------------------

# Linelist
df_raw <- import(here("data/gi_2021-06-17_linelist.xlsx"))

# Labs
df_lab_luh <- import(here("data/gi_2021-06-17_lab_luh.csv"))
df_lab_vnrl <- import(here("data/gi_2021-06-17_lab_vnrl.csv"))
df_lab_ghc <- import(here("data/2021-06-17_lab_ghc.csv"))

```

## Inspecting your data

You have also learned to view your data by navigating the enrivonment. You can see the names, classes, and first few values of each column by click on the blue button. 

![](/images/environmentdf.png)

## Inspecting your data

You can also view the entire dataframe by clicking on the object name. This would be the same as running `View(df_raw)`

![](/images/data.png)




## Learning objectives
