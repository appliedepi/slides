---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
---

```{r}
pacman::p_load(rio, here, janitor, dplyr, gtExtras, gt, tidyr)

df_raw <- import(here("intror/GIoutbreak_2021-06-05_linelist.csv"), na = "") 
lab_raw <- import(here("intror/GIoutbreak_2021-06-05_labs.xlsx"))

df_raw[df_raw == ""] <- NA

df_raw_demo <- df_raw |> 
  filter(row_number()<6)

df <- df_raw %>% clean_names() |> rename(date_onset = symptoms_started)

df_demo <- df_raw_demo %>% clean_names() |> rename(date_onset = symptoms_started)

```

# Module 4: Part A

## Learning objectives

-   Learn the principles of tidy and clean data
-   Get introduced to functions that clean column names 
-   Learn about date formats in R
-   Get introduced to functions that clean and standardize values

# Recap

## Your script should look like this

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr)

# Import data ------------------------------

df_raw <- import(here("data/raw/GIoutbreak_2021-06-05_linelist.csv"))
lab_raw <- import(here("data/raw/GIoutbreak_2021-06-05_labs.xlsx"))
### CHANGE SO ITS MULTIPLE LAB FILES

```

# Clean and tidy data

## Public health data

Often, raw public health data looks like this:

![](/images/messy.png)

What are the problems with this data?

## Clean data

*Clean Data* is **accurate and in the correct format**, in that it is free from errors, inconsistencies, and irrelevant information. 

::: {.fragment}

For example:

:::

::::: {column}

:::: {.column width="50%"  .fragment}

*Dirty data:* Spelling mistakes, inconsistent column name formatting, non-standardised categories 
```{r}

data.frame(
  case = c("CASE1", "Case2", "Case 3", "Case 4"),
  `AGE IN YEARS` = c(31, 24, 18, 33),
  Sex = c("f", "m", "MLE", "female")
) |> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```
::::

:::: {.column width="50%" .fragment}

*Clean:* Machine-readable column names, consistent ways of presenting information, no errors

```{r}

data.frame(
  case = c("Case 1", "Case 2", "Case 3", "Case 4"),
  age = c(31, 24, 18, 33),
  sex = c("female", "male", "male", "female")
) |> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```
::::

:::::

## Tidy data

"Tidy data" means data that is easy to work with, analyse, and visualize. 

Below are 3 core principles of "tidy data":

::: incremental 

- Each *value* must have its own *cell*
- Each *variable* (attribute being analysed) must have its own *column*
- Each *observation* (unit of analysis) must have its own *row*

:::

## Tidy data examples

::::::: columns
:::: {.column width="50%"}

*Messy:* Age and sex are in the same column

```{r}

data.frame(
  case = c("Case 1", "Case 2", "Case 3", "Case 4"),
  age_sex = c("31female", "24male", "18male", "33female")
) |> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```

::::
:::: {.column width="50%" .fragment}

*Clean:* Variables of age and the age unit are in their own columns

```{r}

data.frame(
  case = c("Case 1", "Case 2", "Case 3", "Case 4"),
  age = c(31, 24, 18, 33),
  sex = c("female", "male", "male", "female")
) |> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```
::::

:::::::

## Tidy data examples

::::::: columns
:::: {.column width="50%"}

*Messy:* Small dataframe of mosquito nets distributed per month per clinic

```{r}

nets <- data.frame(
  clinic = c("Clinic 1", "Clinic 2", "Clinic 3"),
  January = c(100, 120, 200),
  February = c(110, 125, 240),
  March = c(100, 115, 190)
)

nets |> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```

::::
:::: {.column width="50%" .fragment}

*Clean:* Columns for month and net counts; one row per combination of clinic and month

```{r}

nets |> 
  tidyr:: pivot_longer(cols = January:March, 
               names_to = "month", 
               values_to = "nets") |> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```

::::

:::::::


## Tidy data examples

::::::: columns
:::: {.column width="40%"}

*Messy:* Small dataframe of hobbies of two people

```{r}

data.frame(
  Name = c("Paula", "Chris"),
  Hobbies = c("Reading, Cooking", "Hiking")
)|> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)

```

::::
:::: {.column width="60%" .fragment}

*Clean:* One column for each hobby
```{r}

data.frame(
  name = c("Paula", "Chris"),
  hobby_reading = c(TRUE, FALSE),
  hobby_cooking = c(TRUE, FALSE),
  hobby_hiking = c(FALSE, TRUE)
)|> 
    gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22)


```

::::

:::::::

## Tidy vs clean data

 Data can be clean but not tidy; and tidy but not clean!

![](/images/quadrants.png)

## Functions today

We will cover:

- *glimpse()* from {dplyr} and *tabyl()* from {janitor} to inspect data
- *clean_names()* from {janitor} and *rename()* from {dplyr} to clean column names
- *case_match()* from {dplyr} to standardize values
- *unite* and *blabla* from {bla} to move data between columns FIX THIS

# Inspecting the overall data

## Our data {.exercise-slide}

We will use the new linelist shared by your colleagues (GIoutbreak_2021-06-05_linelist.csv). 

```{r}
df_raw_demo |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 13) 
```    

::: {.obs-box}
⚠️ **NOTE!** Remember from the last module that you can use the `View()` function to inspect the whole dataset!
:::

## glimpse()

::: slide-header
{dplyr}
:::

You can also use glimpse() from {dplyr}

- *Purpose*: To provide a quick overview of the data: column names, data types, and preview of top values. 
- *Why*: To give you an output that helps you understand the data quickly
- *Example*: You want to get an understanding of how clean and complete a dataset is
- *How*: 

::: {.code-box}
`glimpse(data)`
:::

::: {.obs-box}
⚠️ **NOTE!** You could also write `data %>% glimpse()`. However as you will not continue the pipe chain, it is simpler to not use the pipe. 
:::
    
## Example

::: {.code-box}
`glimpse(df_raw)`
:::

::: {.arrow-box}
&#8595;
:::


```{r}
glimpse(df_raw)
```


# Cleaning column names

## clean_names()

::: slide-header
{janitor}
:::

- *Purpose:* To standardize column names by making them lowercase, machine-readable, and consistent.
- *Why:* For easier use in programming and analysis, avoiding issues with special characters, spaces, or inconsistent formatting.
- *Example:* If your dataset has columns like "First Name" or "AGE (Yrs)", clean_names(data) will convert them to first_name and age_yrs.
- *How:* 

::: {.code-box-small style="width: 600px"}
`data %>% clean_names()`
:::
<br>

::: {.obs-box}
⚠️ **NOTE!** Use of pipe in these examples going forward
:::

## Example

::: slide-header
{dplyr}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df_raw %>% clean_names()
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Raw column names (6 shown)

```{r}

df_cols <- df_raw |> select(id, region, Sex, `Month of birth`, symptoms_started, `FOUND ON`)
                 
data.frame(column_names = colnames(df_cols)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Processed column names

```{r}
data.frame(column_names = colnames(df_cols |> clean_names())) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

```
:::
:::
:::

## rename()

- *Purpose:* To specify new column names for one or more columns in a dataset.
- *Why:* So column names are more meaningful, consistent, or aligned with a preferred naming convention, making them easier to use.
- *Example:* If your dataset has a column named Age_Yrs but you want to rename it to age, you can use rename(data, age = Age_Yrs).
- *How:* 

::: {.code-box-small style="width: 600px"}
`data %>% (new_name = old_name)`
:::

## Starting from clean_names()...

::: slide-header
{dplyr}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df_raw %>% rename(date_onset = symptoms_started)
```
:::

<br><br>

::: columns
::: {.column width="47%"}
::: input-box
Raw column names (6 shown)

```{r}

df_cols <- df_raw |> select(id, region, Sex, `Month of birth`, symptoms_started, `FOUND ON`)
                 
data.frame(column_names = colnames(df_cols)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Processed column names

```{r}
data.frame(column_names = colnames(df_cols |> clean_names())) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

```
:::
:::
:::


## ...and add rename()

::: slide-header
{dplyr}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df_raw %>% clean_names() |> 
  rename(date_onset = symptoms_started)
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Raw column names (6 shown)

```{r}
data.frame(column_names = colnames(df_cols)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Processed column names

```{r}
data.frame(column_names = colnames(df_cols |> clean_names() |> 
                                    rename(date_onset = symptoms_started))) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

```
:::
:::
:::


## Now assign to new object!

::: slide-header
{dplyr}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df <- df_raw %>% clean_names() |> 
  rename(date_onset = symptoms_started)
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Raw column names (6 shown)

```{r}
data.frame(column_names = colnames(df_cols)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
[Stored in environment]
:::
:::
:::


# Exercise

## Scenario {.exercise-slide}

::: incremental

:::

## Access the exercises {.exercise-slide}

Instructions here

# Recap

## Put code altogether


## Revision! Column names

::::::: columns
::: {.column width="60%"}
Just like object names, column names in R are case sensitive. 

R *requires* that column names:

-   Start with a letter, not a number
-   Are unique (two columns in a dataframe cannot have the same name)

It is *good practice* that column names:

-   Do not contain spaces or special characters other than underscores or periods
-   Are short and easy to understand
:::

::::: {.column width="40%"}
::: {style="background: #DAF7A650; width=120px; "}

- ✔ age
- ✔ sex
- ✔ date_onset
:::

::: {style="background: #f5bcb150; width=120p;  "}

- ❌ 18_or_younger
- ❌ Sex
- ❌ Age in years
- ❌ age_in_days_round_t...
:::
:::::
:::::::

## Learning objectives
