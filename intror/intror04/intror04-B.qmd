---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    code-line-numbers: false
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
---

```{r}
pacman::p_load(rio, here, janitor, dplyr, gtExtras, gt, tidyr, stringr, lubridate)

df_raw <- import(here("intror/gi_2021-06-17_linelist.xlsx"), na = "") 

df_raw_demo <- df_raw |> 
  filter(row_number()<6)

df <- df_raw %>% clean_names() |> rename(date_onset = symptoms_started)

df_demo <- df_raw_demo %>% clean_names() |> rename(date_onset = symptoms_started)

df_end <- df_raw %>%
  
    # Clean column names
    clean_names() %>%
    rename(date_onset = symptoms_started) |> 
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) %>%
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Balara", "Balra") ~ "Balara",
             c("Baudhimai") ~ "Baudhimai",
             c("Durga Bhagwati") ~ "Durga Bhagwati",
             c("Gaur", "Guar") ~ "Gaur",
             c("Ishanath") ~ "Ishanath",
             c("Paroha", "Parha") ~ "Paroha",
             c("Rajdevi", "Rajdeve") ~ "Rajdevi",
             c("Rajpur") ~ "Rajpur",
             c("yemunamai") ~ "Yemunamai",
             .default = NA_character_))  # Handle unexpected cases



```

# Module 4: Part B

## Module 4 learning objectives

In part A you:

-   Learned the principles of tidy and clean data
-   Were introduced to functions that clean column names 

In part B you will:

-   Learn how to change the class of a column, in particular deal with dates
-   Get introduced to functions that clean and standardize values


# Column classes

## Revision

Remember these value/column classes?

::: {#general-box style="text-align: left; width: 850px; background: #ebebeb; margin: 0 auto; font-size: 29px;"}

| Class      | Description                                  |
|------------|----------------------------------------------|
| Numeric    | Numbers, which can include decimal points (e.g. 1.3) |
| Character  | Text or string values (e.g., "hello" but also "200")        |
| Logical    | Boolean values (`TRUE`, `FALSE`)             |
| Factor     | Categorical data (e.g., "low", "medium", "high") |
| Date       | Dates (e.g. "2025-01-01")                    |
:::

Note that dates are stored internally as the number of days since January 1, 1970 - but R formats them as YYYY-MM-DD.

## Inspecting data with glimpse()

::: slide-header
{dplyr}
:::

::: incremental
- *Purpose*: To provide a quick overview of column names, column class, and preview of top values. 
- *Why*: To give you an output that helps you understand the data quickly
- *Example*: You want to get an understanding of how clean and complete a dataset is
- *How*: 
:::

::: {.code-box .fragment}
`glimpse(data)`
:::

::: {.obs-box .fragment}
⚠️ **NOTE!** You could also write `data %>% glimpse()`. However as you will not continue the pipe chain, it is simpler to not use the pipe. 
:::
    
## Example

::: slide-header
{dplyr}
:::

This inspects the object df - remember you already standardised the column names.

You can see a few character columns that should be date. Let's transform these.

::: {.code-box}
`glimpse(df)`
:::

::: {.arrow-box}
&#8595;
:::

::: {.general-box style="width: 1100px; max-height: 40vh; overflow-y: auto"}
```{r}
glimpse(df)
```
:::

## Dates with {lubridate}

::: slide-header
{lubridate}
:::

::: incremental

- *Purpose*: These functions convert dates written as strings to a Date class.
- *Why:* They simplify date handling by automatically interpreting different spellings and formats. 
- *Example:* You have two columns containing dates written the American way (month-day-year) and European way (year-month-day) and want to easily convert both to a Date class.
- *How*:
   - `mdy()` converts strings written as month-day-year
   - `dmy()` converts strings written as day-month-year
   - `ymd()` converts strings written as year-month-day
   
:::

## Example

::: slide-header
{lubridate}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df %>% 
  mutate(admission = mdy(admission))
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input (one column shown)
```{r}
df_demo %>% select(admission) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output
```{r}
df_demo %>% select(admission) |> 
  mutate(admission = mdy(admission)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::

::: {.obs-box .fragment}
⚠️ **NOTE**: Any values that R cannot recognise as a date become missing values (`NA`)
:::

:::
:::


## Example

::: slide-header
{lubridate}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df %>% 
  mutate(admission = mdy(admission),
         discovered = dmy(discovered))
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input (two columns shown)
```{r}
df_demo %>% select(admission, discovered) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output
```{r}
df_demo %>% select(admission, discovered) |> 
  mutate(admission = mdy(admission),
         discovered = dmy(discovered)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
:::
:::


## as.xxx() functions

::: incremental
- *Purpose*: To change the class of an object or column
- *Why*: So values can be treated appropriately in analyses
- *Example*: You want to make sure columns with numbers are recognised as numeric class so you can perform calculation
- *How*: 
  - `as.numeric()` to convert to numeric class
  - `as.character()` to convert to character class
  - `as.logical()` to convert to logical class (`TRUE`/`FALSE`)
  
:::

:::::: columns


:::: {.column .fragment style="text-align: centre; width: 35%;"}

**E.g. apply to a value:**

```{r eval=F, echo=T}
as.character(x)
```
::::

:::: {.column .fragment style="text-align: centre; width: 60%;"}

**Or to column:**

```{r eval=F, echo=T}
data %>% mutate(col1 = as.character(col1)
```

::::
:::::


# Standardising and correcting values

## Inspecting values

::: slide-header
{dplyr; janitor}
:::

Remember, you can use `count()` or `tabyl()` to quickly look for spelling variations. Let's start with tabulating the sex and region columns in df. 

::::::: columns
::::: {.column width="48%"}

::: {.code-box-small}
`df %>% count(sex)`
:::

::: {.arrow-box}
&#8595;
:::

::: {.output-box}
```{r}
count(df, sex) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 17) 
```
:::

:::::

::::: {.column width="2%"}
:::::

::::: {.column width="48%"}

::: {.code-box-small}
`df %>% tabyl(region)`
:::

::: {.arrow-box}
&#8595;
:::

::: {.output-box}
```{r}
tabyl(df, region) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 17) 
```
:::

:::::

:::::::



## str_to_xxx() functions

::: slide-header
{stringr}
:::

The {stringr} package has several related functions that control the capitalisation of text. This standardization enables accurate counting and comparing.

::: {#general-box style="text-align: left; width: 850px; background: #ebebeb; margin: 0 auto; font-size: 24px;"}
| Function               | Purpose and example                                                                        |
|------------------------|----------------------------------------------------------------------------------------|
| `str_to_lower()`        | Converts text to **lowercase** <br> `str_to_lower("Hello WORLD")` → `"hello world"`   |
| `str_to_upper()`        | Converts text to **uppercase** <br>       `str_to_upper("Hello world")` → `"HELLO WORLD"`   |
| `str_to_title()`        | Capitalizes **each word** <br>            `str_to_title("hello world")` → `"Hello World"`   |
| `str_to_sentence()`     | Capitalizes **only the first letter** of the sentence <br>  `str_to_sentence("hello WORLD.")` → `"Hello world."` |
:::

## Example

Let's continue cleaning df and clean the region column. We pick `str_to_title` to capitalise the first letter of each word as these are names. 

::: slide-header
{stringr}
:::

<br>

::: {.code-box-small style="width: 700px; font-size: 40px;"}
```{r echo=T, eval=F}
df %>% 
  mutate(region = str_to_title(region))
```
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input
```{r}
df_demo %>% select(region) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::

:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output
```{r}
df_demo %>% select(region) |> 
  mutate(region = str_to_title(region)) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
:::
:::



## Example

We can pipe into count() to see how now there are much fewer unique region values.

:::: columns
:::: {.column width="60%"}
::: {.code-box-small style="width: 600px; font-size: 37px;"}
```{r echo=T, eval=F}
df %>% 
  mutate(region = str_to_title(region)) %>%
  count()
```
:::
::::

:::: {.column width="2%"}

::: {.arrow-box}
&#8594;
:::
::::

:::: {.column width="38%"}
::: {.output-box}
```{r}
df %>% 
  mutate(region = str_to_title(region)) |> 
  count(region) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
::::
:::::


## case_match() 

::: slide-header
{dplyr}
:::

::: incremental 

- *Purpose*: To record or transform specific values in a column 
- *Why*: To correct inconsistencies and typos for cleaner, more analysable data.
- *Example*: You have a Region column with values like "Noth", "Norht", and "North", which need standardizing to 'North'
- *How*: Combine this function with mutate()

:::

::: {.code-box-small style="width: 1100px; font-size: 36px;" .fragment}
```{r, eval=F, echo=T}

data %>%
  mutate(col1 = case_match(col1,
                           pattern1 ~ replacement1, # Specific replacements 
                           pattern2 ~ replacement2,
                           ...,
                           .default = replacement3) # Replacement of unspecified values

```
:::

## Example

Here is an example with a small dataframe about fruits!

:::: columns
:::: {.column width="67%"}
::: {.code-box-small style="width: 690px; font-size: 35px;"}
```{r echo=T, eval=F}
df_fruits %>%
  mutate(fruit_corrected = case_match(
    fruit,
    "appl" ~ "apple",
    "appple" ~ "apple",
    "aaple" ~ "apple",
    "bananna" ~ "banana",
    "pearr" ~ "pear",
    .default = fruit  # Keeps correct values unchanged
  ))
```
:::
::::

:::: {.column width="2%"}

::: {.arrow-box}
&#8594;
:::
::::

:::: {.column width="31%"}
::: {.output-box}
```{r}

df_fruits <- tibble(
  id = 1:8,
  fruit = c("appl", "bananna","appple", "banana", "aaple", "pear", "pearr", "apple")
)

df_fruits %>%
  mutate(fruit_corrected = case_match(
    fruit,
    "appl" ~ "apple",
    "appple" ~ "apple",
    "aaple" ~ "apple",
    "bananna" ~ "banana",
    "pearr" ~ "pear",
    .default = fruit  # Keeps correct values unchanged
  )) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
::::
:::::


## Example

See how you can *reduce repetition* in your code with the `c()` function to combine the different incorrect spellings of "apple":

:::: columns
:::: {.column width="67%"}
::: {.code-box-small style="width: 690px; font-size: 35px;"}
```{r echo=T, eval=F}
df_fruits %>%
  mutate(fruit_corrected = case_match(
    fruit,
    c("appl", "appple", "aaple") ~ "apple",
    "bananna" ~ "banana",
    "pearr" ~ "pear",
    .default = fruit  # Keeps unspecified values unchanged
  ))
```
:::
::::

:::: {.column width="2%"}

::: {.arrow-box}
&#8594;
:::
::::

:::: {.column width="31%"}
::: {.output-box}
```{r}

df_fruits %>%
  mutate(fruit_corrected = case_match(
    fruit,
    c("appl", "appple", "aaple") ~ "apple",
    "bananna" ~ "banana",
    "pearr" ~ "pear",
    .default = fruit  # Keeps unspecified values unchanged
  )) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::
::::
:::::

::: {.obs-box .fragment}
⚠️ **NOTE**: This corrects specified typos; other values stay unchanged. To exclude invalid values, you can specify correct spellings as well and change `.default` to be `NA_character.` 
:::

## str_replace()

::: slide-header
{stringr}
:::

Another {stringr} function is: `str_replace()`

- *Purpose*: Replace the first instance of a pattern *within* a string with a specified replacement
- *Why*: To modify or clean *parts* of text data (unlike `case_match()` which replaces the whole value)
- *Example*: You want to correct spelling errors within a free-text response column
- *How*:

::: code-box
```{r eval=F, echo=T}
str_replace(string, pattern, replacement)
```
:::

::: {.obs-box .fragment}
💡 **NOTE** If you want to replace every instance of a pattern in a string, use `str_replace_all()`
:::

## Example

Here is an example with a small dataframe of symptoms. It would be too much work to use `case_match()` to clean each date value to remove the word "Symptoms", so you can use `str_replace()` to fix just that part of the script.

::: {.code-box-small style="width: 690px; font-size: 35px;"}
```{r echo=T, eval=F}
df_dates %>%
  mutate(symptoms_corrected = str_replace(bday, "DATE: ", ""))
```
:::

::: {.arrow-box}
&#8595;
:::

::: {.output-box style="width: 650px; margin: auto;"}
```{r}

df_symptoms <- tibble(
  id = 1:5,
  symptoms = c("Symptoms: headache, fever", "Symptoms: vomiting, fever","Symptoms: abdominal cramps", "Symptoms: headache", "Symptoms: headache"))

df_symptoms %>%
  mutate(symptoms_corrected = str_replace(symptoms, "Symptoms: ", "")) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 19) 
```
:::

# Exercises 

## Scenario {.exercise-slide}

Keep cleaning your data! In particular:

- Clean the column names
- Make sure date columns are recogised by R as dates
- Clean categorical columns 

# Recap

## Your code {.exercise-slide}

Your code should now look something like this:

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate)

# Import data ------------------------------

# Linelist
df_raw <- import(here("data/gi_2021-07-07_linelist.xlsx"))

# Labs
df_lab_luh <- import(here("data/gi_2021-07-07_lab_luh.csv"))
df_lab_vnrl <- import(here("data/gi_2021-07-07_lab_vnrl.csv"))
df_lab_ghc <- import(here("data/gi_2021-07-07_lab_ghc.csv"))


# Clean linelist data ---------------------------

df <- df_raw %>%
  
    # Clean column names
    clean_names() %>%
    rename(date_onset = symptoms_started) %>%
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) %>%
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  # Handle unexpected cases



```

## Glimpse data so far {.exercise-slide}

::: slide-header
{dplyr}
:::

We can see the transformed date columns and standardised region/sex values.

::: {.code-box}
`glimpse(df)`
:::

::: {.arrow-box}
&#8595;
:::

::: {.general-box style="width: 1100px; max-height: 55vh; overflow-y: auto"}
```{r}
glimpse(df_end)
```
:::

