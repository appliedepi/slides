---
title: "Applied Epi"
subtitle: "Taking control of your data"
format:
  revealjs: 
    code-line-numbers: false
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../../images/Applied_Epi_logo.png
    css: ../../images/styles.css
    footer: <https://appliedepi.org>
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

```{r}

# Packages
pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate, gtExtras, gt, tidyr, ggplot2, glue)

# Load data as needed 
df_raw <- import(here("intror/gi_2021-06-17_linelist.xlsx")) 

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |>
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |>
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  |> 
  
  # Deduplicate to one row per case, based on case ID
  distinct(id, .keep_all = TRUE) |>
  
  # Combine some columns
  unite("date_of_birth", 
          c("birthyear", "month_of_birth", "daybirth"), sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |>
  mutate(date_report =  coalesce(told_on, reported, discovered, found_on, report)) |> 
    select(-told_on, -reported, -discovered, -found_on, -report) |>
  
  # Create columns labelling diarrhoea or dehydration
  mutate(symptoms = str_to_lower(symptoms),
         symp_diarrhea = str_detect(symptoms, "diarrhoea|diarrhea|watery stool|loose stool|awd"),
         symp_dehydration = str_detect(symptoms, "dehydra|lack of fluids|lack fluids")) |>
  
  # Create case definition column
  mutate(case_def = case_when(cholera_rdt_positive==1 ~ "Probable",
                              symp_diarrhea ==TRUE & symp_dehydration==TRUE ~ "Suspected", 
                              TRUE ~ "Unclear")) |> 
  
  # Create week column for onset date
 # mutate(date_onset_week = floor_date(date_onset, "week")) |> 
  
  # Create week column for report date
  mutate(date_report_week = floor_date(date_report, "week")) 
  

# Demo data -------------------------------

ggplot() 

set.seed(123)  # For reproducibility

# Number of infants
n <- 310  

# Set the current year for consistency (e.g., 2025)
current_year <- 2025

# Simulating age (in months)
age_months <- sample(0:48, n, replace = TRUE)

# Calculate birth year based on current year and age in months
age_years <- age_months / 12
birth_year <- current_year - floor(age_years)

# Simulating sex (50% probability of Male or Female)
sex <- sample(c("Male", "Female"), n, replace = TRUE)

# Adjust height and weight distributions based on sex (males slightly larger on avg)
height_adjustment <- ifelse(sex == "Male", 1, -1)  # Males tend to be slightly taller
weight_adjustment <- ifelse(sex == "Male", 0.2, -0.2)  # Males tend to be slightly heavier

# Simulating height and weight based on age and sex
height_cm <- rnorm(n, mean = 50 + age_months * 1.5 + height_adjustment, sd = 3)  
weight_kg <- rnorm(n, mean = 3.2 + age_months * 0.5 + weight_adjustment, sd = 1)

# Define underweight: Below 5th percentile (approximate rule-of-thumb)
underweight <- ifelse(weight_kg < (3.2 + age_months * 0.45), "Under weight", "Not under-weight")

# Create data frame
df_infants <- tibble(
  age_months,
  sex,
  height_cm,
  weight_kg,
  underweight,
  birth_year
)
```

# Module 6: Part B

## Module 6 learning objectives

In Part A you will:

-   Learn why use {ggplot} for plotting in R
-   Learn to make a basic plot with {ggplot2}, including dynamic and
    static aesthetics and facetting

In Part B you will:

-   Learn to customize your ggplot with themes and scales

## Your new plots {.exercise-slide}

::: slide-header
{ggplot2}
:::

You finished off with this - but it's a bit ugly!

::: {.code-box style="display: block; font-size: 32px; width=60%"}
```{r eval=F, echo=T}
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week, fill = case_def)) +
  facet_wrap(.~region)
```
:::

::: arrow-box
â†“
:::

```{r fig.dpi=300, fig.align="center"}
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def)) +
  facet_wrap(.~region)  +
  theme_gray(base_size = 15) +  # Base font size
  theme(
    legend.text = element_text(size = 15),  # Legend text size
    legend.title = element_text(size = 15)  # Legend title size
  )

```

# Scales

## Scales

::: slide-header
{ggplot2}
:::

-   *Purpose*: To change how the aesthetics of a ggplot are displayed
-   *Why*: To customize the appearance of your plot
-   *Example*: To specify plot colours, how dates are written in axis
    labels, the min/max of axes
-   *How*: There are many different `scale` functions, which follow a
    general formula:

::: {.code-box-small style="width=60%;"}
[**scale**]{style="color: purple;"}**\_[aesthetic]{style="color: blue;"}\_[method]{style="color: green;"}()**

1)  [**scale**]{style="color: purple;"}: this prefix never changes.
2)  [**aesthetic**]{style="color: blue;"}: `fill` or `colour` or `x` or
    `y` etc.
3)  [**method**]{style="color: green;"}: `_continuous()` or
    `_discrete()` or `_manual()` or `_date()` etc.
:::

## Example

::: slide-header
{ggplot2}
:::

Let's go back to the small plot of infant height vs weight from Part A

:::::::: columns
::::: {.column width="48%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) 
```
:::

::: {.obs-box .fragment}
ðŸ’¡ **NOTE** These are the default ggplot2 colours - you will get used to
(and start to avoid) them!
:::
:::::

::: {.column style="width: 2%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  theme_gray(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::

## Example

::: slide-header
{ggplot2}
:::

Add
[scale\_]{style="color: purple;"}[color]{style="color: blue;"}\_[manual]{style="color: green;"}()
to manually select the colour of the points

:::::::: columns
::::: {.column width="48%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy"))
```
:::

::: {.obs-box .fragment}
ðŸ’¡ **NOTE** See how this uses the c() function to provide a list of
colours.
:::
:::::

::: {.column style="width: 2%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy")) +
  theme_gray(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::

## Example

::: slide-header
{ggplot2}
:::

Add
[scale]{style="color: purple;"}\_[y]{style="color: blue;"}[\_]{style="background-color: rgb(255, 255, 255);"}[continuous]{style="color: green;"}()
to specify frequency of tick marks along the y axis

:::::::: columns
::::: {.column width="48%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5))
```
:::

::: {.obs-box .fragment}
ðŸ’¡ **NOTE** This time, we use the `seq()` function as short-hand to
indicate that we want a sequence from 0 to 30, with increments of 5
:::
:::::

::: {.column style="width: 2%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy")) +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_gray(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::

## More examples

There are so many different `scales` functions, and the are written in slightly different ways. Don't worry about memorizing them! 

Here are some of the most commonly used ones:

::: {#general-box style="text-align: left; width: 850px; background: #ebebeb; margin: 0 auto; font-size: 24px;"}
| You want to adjust   | Scale command             |
|----------------------|---------------------------|
| continuous y-axis    | `scale_y_continuous()`    |
| date x-axis          | `scale_x_date()`          |
| categorical x-axis   | `scale_x_discrete()`      |
| fill, continuous     | `scale_fill_manual()` |
| color, manual assign | `scale_color_manual()`    |
:::

# Labels

## Labels

::: slide-header
{ggplot2}
:::

-   *Purpose*: To add labels and titles to your plot
-   *Why*: To make your plot clearer to interpret
-   *Example*: You can add titles and subtitles, and change the x and y axis names 
-   *How*: Add the 'labs()' function to your ggplot and specify the desired text with the appropriate argument:

::: code-box
```{r eval=F, echo=T}
labs(title = "xxxxx",
     subtitle = "xxxx",
     x = "xxxx",
     y = "xxxx")
```
:::



## Example

::: slide-header
{ggplot2}
:::

Continuing from before, the ggplot uses column names as default x/y/legend labels. 

:::::::: columns
::::: {.column width="48%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5))
```
:::


:::::

::: {.column style="width: 2%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy")) +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_gray(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::



## Example

::: slide-header
{ggplot2}
:::

Here we add the range of different possible labels:

:::::::: columns
::::: {.column width="49%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns")
```
:::

:::::

::: {.column style="width: 1%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}

ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values =
                       c("lightblue",
                         "navy")) +
  scale_y_continuous(breaks =
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  theme_gray(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )

```

:::
::::::::


# Themes

## Themes

::: slide-header
{ggplot2}
:::

-   *Purpose*: To control non-data design features
-   *Why*: To customize the appearance of your plot (???)
-   *Example*: To change the background colour, title font size, legend
    positioning... even the length of tick marks along an axis!
-   *How*: There are many different `theme` functions, either:
   - Micro themes: Customize specific elements (e.g., axis text, grid lines) within `theme()`.
   - Complete themes: Use predefined `theme_xxxx()` functions for overall plot style (e.g., `theme_minimal()`, `theme_bw()`).
   
## Example: Complete theme

::: slide-header
{ggplot2}
:::

Let's pick up again from our last plot...

:::::::: columns
::::: {.column width="49%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") 
```
:::

::: {.obs-box .fragment}
ðŸ’¡ **NOTE** The default complete theme for ggplots (as seen here) is actually `theme_gray()`
:::

:::::

::: {.column style="width: 1%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy")) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_gray(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::

## Example: Complete theme

::: slide-header
{ggplot2}
:::

Let's change the overall theme to `theme_bw()`! 

:::::::: columns
::::: {.column width="49.5%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  theme_bw()
```
:::

:::::

::: {.column style="width: 0.5%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy")) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_bw(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::

## Other complete themes

Here are the other complete themes that come with {ggplot2}!

![](images/themes.png){style="display: block; margin: auto; width: 100%;"}

## Example: Micro themes 

::: slide-header
{ggplot2}
:::

Let's add an empty `theme()` function - there is no change to the plot just yet

:::::::: columns
::::: {.column width="49.5%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  theme_bw() +
  theme()
```
:::

:::::

::: {.column style="width: 0.5%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy"))+
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_bw(base_size = 3.5) +  # Base font size
  theme(
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::

## Example: Micro themes 

::: slide-header
{ggplot2}
:::

And now let's specifically alter the fonts and the legend in `theme()`:  

:::::::: columns
::::: {.column width="49.5%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_manual(values = 
                       c("lightblue", 
                         "navy")) +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold"),      # Make title bold
    legend.position = "bottom",                         # Move legend underneath plot
    plot.subtitle = element_text(color = "gray40"))    # Change colour of subtitle
```
:::

:::::

::: {.column style="width: 0.5%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_manual(values = c("lightblue", "navy"))+
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "Data collected from 5 towns") +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_bw(base_size = 3.5) +  # Base font size
  theme(
    plot.title = element_text(face = "bold"), # Make title bold
    plot.subtitle = element_text(color = "gray40"), # Change colour of subtitle
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3),  # Legend title size
    legend.position = "bottom" # Move legend underneath plot
  )
```
:::
::::::::

# Tips

## How to pick colours?

- You write colours as text in R, inside quotation marks. Newer versions of RStudio will highlight them in the right colour: e.g. <span style="background-color: red;">"red</span>.
- R supports many colors, including
    - Over 650 named colors, e.g "red", "blue" (check them out with `colors()`)
    - Hexcodes, which are hexidecimals that represent very specific colours (e.g., "#FF5733").
- There are many palettes available in additional packages for consistent, accessible color schemes, such as {RColorbrewer}, {ggsci}, {viridis}, and many thers

## RColorBrewer

::: slide-header
{ggplot2; RColorBrewer}
:::

For example, here are the palettes available within the package {RColorBrewer}

![](images/rcolorbrewer.png){style="display: block; margin: auto; width: 100%;"}


## RColorBrewer

::: slide-header
{ggplot2; RColorBrewer}
:::

And this is how we can adjust our plot to use one of the RColorBrewer palettes.

:::::::: columns
::::: {.column width="49.5%"}
<br>

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=T}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex)) +
  scale_color_brewer(palette = "Set2") +
  scale_y_continuous(breaks = 
                       seq(0, 30, by = 5)) +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "No missing height or weight data") +
  theme_bw() +
  theme(plot.title = element_text(face = "bold"),      # Make title bold
    legend.posiiton = "bottom",                         # Move legend underneath plot
    plot.subtitle = element_text(color = "gray40"))    # Change colour of subtitle
```
:::

:::::

::: {.column style="width: 0.5%; text-align: center;"}
<br> <br> â†’
:::

::: {.column display="width: 50%; margin: auto;"}
```{r fig.height= 1.3, fig.width=1.2, fig.dpi=200}
ggplot() +
  geom_point(data = df_infants,
           aes(x= height_cm,
               y = weight_kg,
               color = sex), size = 0.3) +
  scale_color_brewer(palette = "Set2") +
  labs(title = "Height and weight of infants",
       subtitle = "Data as of 1st January 2025",
       x = "Height (cm)",
       y = "Weight (kg)",
       color = "Sex",
       caption = "No missing height or weight data")  +
  scale_y_continuous(breaks = seq(0, 30, by = 5)) +
  theme_bw(base_size = 3.5) +  # Base font size
  theme(
    plot.title = element_text(face = "bold"), # Make title bold
    legend.position = "bottom", # Move legend underneath plot
    plot.subtitle = element_text(color = "gray40"), # Change colour of subtitle
    legend.key.size = unit(0.1, "cm"),  # Smaller legend keys
    legend.text = element_text(size = 3),  # Legend text size
    legend.title = element_text(size = 3)  # Legend title size
  )
```
:::
::::::::


## Picking your theme

What can we advise about where they look for scales/themes?

# Recap


## Your updated plot {.exercise-slide}

::: slide-header
{ggplot2}
:::

You've now customized your plot - note how you integrated {glue!}

::: {.code-box-small style="display: block; font-size: 32px; width=80%"}
```{r eval=F, echo=T}
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def)) +
  facet_wrap(.~region) +
  scale_fill_manual(values = c("Unclear" = "gray70",
                               "Suspected" = "seagreen",
                               "Probable" = "navy")) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  labs(title = "Cases by report week, presented by case category and region",
       subtitle = glue("Data as of {max(df$date_report, na.rm=T)+1}"),
       fill = "Case category",
       x = "Week of report (week starting)",
       y = "Weekly case count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
:::


## Your updated plot {.exercise-slide}

::: slide-header
{ggplot2}
:::

```{r fig.dpi=300, fig.align="center"}
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def)) +
  facet_wrap(.~region) +
  scale_fill_manual(values = c("Unclear" = "gray70",
                               "Suspected" = "seagreen",
                               "Probable" = "navy")) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  labs(title = "Cases by report week, presented by case category and region",
       subtitle = glue("Data as of {max(df$date_report, na.rm=T)+1}"),
       fill = "Case category",
       x = "Week of report (week starting)",
       y = "Weekly case count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# 
# +
#   theme_minimal(base_size = 13) +  # Base font size
#   theme(
#     legend.text = element_text(size = 12),  # Legend text size
#     legend.title = element_text(size = 12),  # Legend title size
#  axis.text.x = element_text(angle = 45, hjust = 1) )

```


## Your code {.exercise-slide}

Your code should now look like this!

```{r eval=F, echo=T}

# Intro course
# Title of script: Cleaning and analysis of GI outbreak data
# Date started: 5th June 2021
# Name: Paula Blomquist

# Load packages-----------------------------

pacman::p_load(rio, here, janitor, dplyr, stringr, lubridate, tidyr)

# Import data ------------------------------

# Linelist
df_raw <- import(here("data/gi_2021-06-17_linelist.xlsx"))

# Labs
df_lab_luh <- import(here("data/gi_2021-06-17_lab_luh.csv"))
df_lab_vnrl <- import(here("data/gi_2021-06-17_lab_vnrl.csv"))
df_lab_ghc <- import(here("data/gi_2021-06-17_lab_ghc.csv"))

# Clean linelist data ---------------------------

df <- df_raw |>
  
    # Clean column names
    clean_names() |>
    rename(date_onset = symptoms_started) |>
  
    # Change character class
    mutate(admission = mdy(admission),
           discovered = dmy(discovered),
           found_on = mdy(found_on),
           reported = ydm(reported),
           told_on = mdy(told_on),
           report  = mdy(report)) |>
  
    # Clean column content  
    mutate(region = str_to_title(region),
           sex = str_to_title(sex), 
           sex = case_match(sex, 
                            c("F", "Fem", "Female") ~ "Female",
                            c("M","Man", "Male") ~ "Male",
                            .default = NA),
           region = case_match(region,
             c("Bexar") ~ "Bexar",
             c("Keda", "Kedah") ~ "Keda",
             c("Liora", "Lioraah") ~ "Liora",
             c("Nellus", "Nelos") ~ "Nelos",
             c("New Ardin", "New Arden") ~ "New Arden",
             c("Sorel", "Sorell") ~ "Sorel",
             c("Taris") ~ "Taris",
             c("Varek") ~ "Varek",
             c("West Morin") ~ "West Morin",
             .default = NA_character_))  |> 
  
  # Deduplicate to one row per case, based on case ID
  distinct(id, .keep_all = TRUE) |>
  
  # Combine some columns
  unite("date_of_birth", 
          c("birthyear", "month_of_birth", "daybirth"), sep = "-") |> 
  mutate(date_of_birth = ymd(date_of_birth)) |>
  mutate(date_report =  coalesce(told_on, reported, discovered, found_on, report)) |> 
    select(-told_on, -reported, -discovered, -found_on, -report) |>
  
  # Create columns labelling diarrhoea or dehydration
  mutate(symptoms = str_to_lower(symptoms),
         symp_diarrhea = str_detect(symptoms, "diarrhoea|diarrhea|watery stool|loose stool|awd"),
         symp_dehydration = str_detect(symptoms, "dehydra|lack of fluids|lack fluids")) |>
  
  # Create case definition column
  mutate(case_def = case_when(cholera_rdt_positive==1 ~ "Probable",
                              symp_diarrhea ==TRUE & symp_dehydration==TRUE ~ "Suspected", 
                              TRUE ~ "Unclear")) |> 
  
  mutate(case_def = factor(case_def, levels = c("Unclear", "Suspected", "Probable"))) |> 
  
  # Create week column for onset date
 # mutate(date_onset_week = floor_date(date_onset, "week")) |> 
  
  # Create week column for report date
  mutate(date_report_week = floor_date(date_report, "week")) 
  

# Plots ------------------------------------------

# By report date and case definition breakdown
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def)) +
  scale_fill_manual(values = c("Unclear" = "gray70",
                               "Suspected" = "lightblue",
                               "Probable" = "seagreen")) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  labs(title = "Cases by report week, presented by case category and region",
       subtitle = glue("Data as of {max(df$date_report, na.rm=T)+1}"),
       fill = "Case category",
       x = "Week of report (week starting)",
       y = "Weekly case count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# By report date and case definition breakdown and region
ggplot() +
  geom_bar(data = df,
           aes(x=date_report_week,
               fill = case_def)) +
  facet_wrap(.~region) +
  scale_fill_manual(values = c("Unclear" = "gray70",
                               "Suspected" = "lightblue",
                               "Probable" = "seagreen")) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
  labs(title = "Cases by report week, presented by case category and region",
       subtitle = glue("Data as of {max(df$date_report, na.rm=T)+1}"),
       fill = "Case category",
       x = "Week of report (week starting)",
       y = "Weekly case count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  


```


## Learning objectives
