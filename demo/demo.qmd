---
title: "Starting with R"
author: "[Applied Epi]"
format:
  revealjs: 
    slide-number: true
    chalkboard: 
      buttons: true
    controls: false
    multiplex: false
    preview-links: auto
    logo: ../images/Applied_Epi_logo.png
    css: ../images/styles.css
    footer: <https://appliedepi.org>
    title-slide-attributes:
      data-background-color: "#012d78"
      style: "font-size: 40px;"
      data-subtitle-style: "font-size: 80px;"  # Subtitle size
      data-author-style: "font-size: 10px;"  # Author size
resources:
  - demo.pdf
fig-align: center
editor: 
  markdown: 
    wrap: 72
---

```{r}
library(ggplot2)
library(tibble)
```

# Introduction

## Welcome!

::::::::::::: columns
::: {.column width="45%"}

![](../images/Applied_Epi_logo.png)
:::
  
::::: {.column width="5%"}
:::::
  
::::: {.column width="45%"}
*Applied Epi* is a non-profit created by and for epidemiologists. 
<br><br>
We aim to *improve applied epidemiology worldwide*, particularly in low-resource settings.
:::::
  
:::::::::::::

## Objectives

This workshop will demonstrate how R can transform your public health work and get you started with coding in R

::: {style="background: lightblue; border-radius: 5px;"}

You will:

* See how R can streamline data cleaning and analysis, create professional visualisations and reports, automate repetitive tasks, and support reproducible research
* Learn and practice key R functions for analysing and visualising epidemiological data
* Apply these functions to investigate an outbreak scenario

:::

::: {style="text-align: right;"}
<br> Note: You are not expected to get familiar with, not fully memorise, the code! 
:::

## Workshop structure

* Brief lecture, live demo, then interactive R exercises
* Exercises take 1‚Äì3 hours, with instructors available for support
* No prior R experience or installation needed; everything runs in your browser!


# Power of R

## About R

-   *What is R?* R is an open-source programming language for
    statistical computing and graphics.
-   *Why R?*
    - ü§ñ *Automation*: Speed up repetitive tasks
    - üìä *Visualization*: Create high quality and flexible figures
    - ü§∏‚Äç‚ôÄÔ∏è *Versatility*: Compatible with various software and file types
    - üí∞ *Cost-effective*: Completely free 
    - üëê *Community*: Supported by a large, active, and friendly community

## R use in public health

R can be used to quickly and reproducibly:

- üî¢ Clean and link complex surveillance data
- üìñ Produce daily or weekly outbreak reports; for one or many geographical areas with minimal additional effort
- üìà Undertake descriptive or inferential statistical analyses
- üîò Produce interactive dashboards so non-analysts/leadership can interrogate data
- üìß Even... send emails with the lastest surveillance statistics

## Sitrep demo

Let's say you work in the country Viraland, where there is a cholera outbreak.

* You've set up a report in R, and *this week's data has come in*. 
* You need to produce *both a word document and powerpoint presentation* with 
   * Case counts
   * Demographic and geographic breakdowns
   * Epicurves and an age-sex pyramid

*Let's see how long this takes!*

# Code and functions

## What is code?

::: fragment
-   *Code:* Instructions in a specific language telling a computer how
    to perform a task
:::

::::::::::::::: {.fragment width="100%"}
-   Code processes an *input* to produce an *output*

:::::::::::::: columns
::: {style="margin-bottom: 4px;"}
:::

:::: {.column width="30%"}
::: input-box
**Input**
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="30%"}
::: code-box-small
**Code**
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="30%"}
::: output-box
**Output**
:::
::::
::::::::::::::
:::::::::::::::

::: {.fragment style="text-align: right;"}
<br> In R you will be typing your code. <br> Don't worry, you'll get
used to it!
:::

## Code can be...

¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace -->

::::::::::::: columns
::: {.column width="20%"}
:::

::::: {.column width="25%"}
::: code-box-small
**Code:** <br> `1 + 1`
:::

¬† <!-- This adds a linespace -->

::: code-box-small
**Code:** <br> `sum(1, 1)`
:::
:::::

::::: {.column width="5%"}
::: arrow-box
‚Üí
:::

¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ¬†
<!-- This adds a linespace --> ¬† <!-- This adds a linespace --> ¬†
<!-- This adds a linespace --> ¬† <!-- This adds a linespace -->

::: arrow-box
¬† <!-- This adds a linespace --> ¬† <!-- This adds a linespace -->‚Üí
:::
:::::

::::: {.column width="25%"}
::: output-box
**Output:** <br> `2`
:::

¬† <!-- This adds a linespace -->

::: output-box
**Output:** <br> `2`
:::
:::::
:::::::::::::

::: {style="text-align: right;"}
We can instruct R with mathematical operators, or words called...
:::

## Functions

-   *Function:* A reusable piece of code that performs a specific task
-   Functions look like this:

![](images/function.png)

## R functions

-   For example, the round() function in R rounds a number. 
- Here, there is also an _argument_ that specifies that the number should be rounded to one decimal place

<br>

:::::::::: columns
::: {.column width="10%"}
:::

:::: {.column width="45%"}
::: code-box-small
**Code:** <br> `round(x = 33.556, digits = 1)`
:::
::::

:::: {.column width="5%"}
::: arrow-box
‚Üí
:::
::::

:::: {.column width="15%"}
::: output-box
**Output:** <br> `33.6`
:::
::::
::::::::::


## Today's functions

In R, you would download a *{package}* containing these functions.
<br><br>

*Functions for visualising data from the {ggplot2} package:*

::: {style="background: lightblue; border-radius: 5px;"}
-   *ggplot()* used with *geom_xxx()* e.g. *geom_histogram()* and *geom_point()*
:::
<br><br>
*Functions for cleaning and summarising data from the {dplyr} package:*

::: {style="background: lightblue; border-radius: 5px;"}
-   *filter()*: To keep rows meeting specific conditions
-   Also: *select()*, *mutate()*, *group_by(), summarise()* and *arrange()* - you'll see these in the exercises. 
:::

# Visualising data with {ggplot2}

## Let's create a plot

::: slide-header
{ggplot2}
:::

Let's start by "opening the canvas" with the ggplot() function. <br><br>

![](images/ggplota.png)

## Let's create a plot

::: slide-header
{ggplot2}
:::

Then we select a specific `geom_xxx()` function. Here, we want a
scatter plot. <br><br>

![](images/ggplotb.png)


## Let's create a plot

::: slide-header
{ggplot2}
:::

Then we add an aesthetics function, to map our data (the columns `height_cm` and `weight_kg`) to the plot 'aesthetics' (to x and y coordinates).

![](images/ggplotc.png)

## Let's create a plot

::: slide-header
{ggplot2}
:::

We can add other aesthetics, e.g `color` for the colour of the
dots. <br><br>

![](images/ggplotd.png)

## Other geoms

![](images/geoms.png){style="display: block; margin: auto; width: 100%;"}

::: {.code-box-small style="display: block; font-size: 32px;"}
```{r eval=F, echo=F}
# USED TO MAKE THE IMAGE


# Violin
ggplot() +
  geom_boxplot(data = df_infants,
           aes(y = height_cm,
               x = underweight))

# Histogram
ggplot() +
  geom_histogram(data = df_infants, 
           aes(x = age_months), binwidth=1)

# Bar
ggplot() +
  geom_bar(data = df_infants,
           aes(x = birth_year,
               fill = underweight))

# Violin
ggplot() +
  geom_line(data = df_infants |> count(birth_year, underweight),
           aes(y = n,
               x = birth_year,
               group= underweight, 
               color= underweight))
```
:::



# Processing data with {dplyr}

```{r}
## Data
pacman::p_load(rio, dplyr, gt)
df <- import(here::here("demo/data/Viraland_cholera_2021-05-25_linelist_clean_demo.rds"))

input_data <- df |> 
  dplyr::select(id, age, sex, date_report)

tab_input <- input_data |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 
```

## filter()

::: slide-header
{dplyr}
:::

::: incremental
-   *Purpose:* To filter data to specific rows of interest
-   *Why:* So you retain only the relevant observations for a particular data processing or analysis step
-   *Example:* You want to create a regional linelist, as a subset of a national linelist
-  *How:* Provide the data frame and a logical condition:
:::

::: {.code-box .fragment}
`filter(data, col == X)`
:::

::: {.fragment style="text-align: right;"}
<br> üí° Rows that evaluate to `TRUE` are kept!
:::



## 

::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, sex == "Male")`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(sex=="Male") |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::


## 

::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, age < 18)`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(age < 18) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::

## 


::: slide-header
{dplyr}
:::

<br>

::: code-box
`filter(df, sex == "Male" & age <18)`
:::

<br>

::: columns
::: {.column width="47%"}
::: input-box
Input

```{r}
tab_input
```
:::
:::

::: {.column width="6%"}
::: arrow-box
`r r2symbols::symbol(3)`
:::
:::

::: {.column width="47%"}
::: output-box
Output

```{r}
tab_output <- input_data |> dplyr::filter(sex == "Male" & age <18) |> 
  gt::gt() |>  gtExtras::gt_theme_guardian() |> 
  gt::tab_options(table.font.size = 22) 

tab_output
```
:::
:::
:::
## In summary

We've now seen:

- Why you'd use R
- An example of sitrep production
- An explanation of code and functions
- How `ggplot` works
- How the `filter` function works

In the exercises you'll explore and run more key functions for visualisation and data processing. Let's go!

# Over to you!

# Well done!

## Review of today's functions

*{ggplot2}* functions for visualising data:

-   *ggplot()* used with *geom_xxx()*: To produce histograms, bar plots, line plots based on data

*{dplyr}* functions for cleaning and summarising data:

-   *select()*: To select specific columns
-   *filter()*: To keep rows meeting specific conditions
-   *mutate()*: To create or modify columns
-   *group_by() and summarise()*: To calculate summary statistics within groups
-   *arrange()*: To order rows by the value of specific columns
-   And remember you can link these functions together with a "pipe": `%>%`

## What's next?

For further explanations of importing, cleaning, and analysing data, please visit the [**Epi R Handbook**](https://epirhandbook.com/). 

Or consider taking Applied Epi's **Intro to R course**! If interested, speak to us, visit our [**website**](https://www.appliedepi.org/), or contact us on **contact@appliedepi.org**

Finally, you can check out [Applied Epi's community forum](http://community.appliedepi.org/) to discuss or post questions about R. 
